position=position_dodge(width=.02),
data=probs) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
gamma <- 1.5             # strength of initial encoding
lambda <- 0.1597503             # rate of memory decay
sigma <- c(0.25, 0.50, 0.75, 1) # amount of belief given to initial hypothesis
int <- c(0, 1, 3, 7)            # number of intervening words
numPic <- c(2, 4, 6)            # number of pics
social_boost = .1               # boost to belief - target of eye gaze
## generate probabilites for different parameter values (sigma, number of pics, delay)
probs <- data.frame()
for (i in 1:length(int)){
for (n in 1:length(numPic)) {
for (s in 1:length(sigma)) {
probs <- rbind(probs,data.frame(p = compute.probs2(gamma, lambda, sigma[s], numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma,
lambda = lambda,
numPic = numPic[n],
cond ="no-social"))
probs <- rbind(probs,data.frame(p = compute.probs2(gamma, lambda, sigma[s]+social_boost, numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma,
lambda = lambda,
numPic = numPic[n],
cond = "social"))
}
}
}
?qplot()
quartz(width=10,height=6,title = "Simulation 6: Sigma + Interval + numPic")
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line"),
position=position_dodge(width=.02),
data=probs) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
View(probs)
quartz(width=10,height=6,title = "Simulation 6: Sigma + Interval + numPic")
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
position=position_dodge(width=.02),
data=probs) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
quartz(width=10,height=6,title = "Simulation 6: Sigma + Interval + numPic")
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
position=position_dodge(width=.09),
data=probs) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
gamma <- 1.5             # strength of initial encoding
lambda <- 0.1597503             # rate of memory decay
sigma <- c(0.25, 0.50, 0.75, 1) # amount of belief given to initial hypothesis
int <- c(0, 1, 3, 7)            # number of intervening words
numPic <- c(2, 4, 6)            # number of pics
social_boost = .2              # boost to belief - target of eye gaze
## generate probabilites for different parameter values (sigma, number of pics, delay)
probs <- data.frame()
for (i in 1:length(int)){
for (n in 1:length(numPic)) {
for (s in 1:length(sigma)) {
probs <- rbind(probs,data.frame(p = compute.probs2(gamma, lambda, sigma[s], numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma,
lambda = lambda,
numPic = numPic[n],
cond ="no-social"))
probs <- rbind(probs,data.frame(p = compute.probs2(gamma, lambda, sigma[s]+social_boost, numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma,
lambda = lambda,
numPic = numPic[n],
cond = "social"))
}
}
}
quartz(width=10,height=6,title = "Simulation 6: Sigma + Interval + numPic")
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
position=position_dodge(width=.09),
data=probs) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
quartz(width=10,height=6,title = "Simulation 6: Sigma + Interval + numPic")
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
position=position_dodge(width=.09),
data=probs) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
gamma <- 1.5             # strength of initial encoding
lambda <- 0.1597503             # rate of memory decay
sigma <- c(0.25, 0.50, 0.75, 1) # amount of belief given to initial hypothesis
int <- c(0, 1, 3, 7)            # number of intervening words
numPic <- c(2, 4, 6)            # number of pics
social_boost = .4            # boost to belief - target of eye gaze
## generate probabilites for different parameter values (sigma, number of pics, delay)
probs <- data.frame()
for (i in 1:length(int)){
for (n in 1:length(numPic)) {
for (s in 1:length(sigma)) {
probs <- rbind(probs,data.frame(p = compute.probs2(gamma, lambda, sigma[s], numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma,
lambda = lambda,
numPic = numPic[n],
cond ="no-social"))
probs <- rbind(probs,data.frame(p = compute.probs2(gamma, lambda, sigma[s]+social_boost, numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma,
lambda = lambda,
numPic = numPic[n],
cond = "social"))
}
}
}
quartz(width=10,height=6,title = "Simulation 6: Sigma + Interval + numPic")
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
position=position_dodge(width=.09),
data=probs) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
rm(list=ls())
library(bootstrap)
library(lme4)
library(ggplot2)
library(arm)
library(directlabels)
library(stringr)
library(plyr)
library(reshape2)
library(car)
options(device="quartz")
d <- read.csv("/Users/kmacdonald/Documents/Projects/SOC_XSIT/processed_data/soc_xsit_expt1_all.csv")
numSubs <- aggregate(correct ~ subid + condition + intervalNum + numPicN, data=d, FUN=mean)
numSubs.summary <- count(numSubs, vars=c("condition", "intervalNum", "numPicN"))
length(unique(numSubs$subid))
numSubs.summary
m2.n <- glmer(correct ~ trialType * condition * intervalNum * numPicN + (trialType | subid),
data=d.gaze.tar, family=binomial, nAGQ=0)
## get the test trials only
d.test <- subset(d, testTrial==1)
length(unique(d.test$subid))
## get first trials only
d.first.trial <- subset(d, testTrial==1 & first.trial==TRUE)
length(unique(d.first.trial$subid))
## grab exposure trials only
d.exp <- subset(d, exposureTrial==1)
length(unique(d.exp$subid))
d.exp$faceIdx6 <- revalue(d.exp$face, c("eyes_left_90"=0, "eyes_right_90"=1,
"eyes_left"=2, "eyes_down_left"=3,
"eyes_down_right"=4, "eyes_right"=5,
"eyescenter"=-1))
# flag if subject chose target of eye gaze
# exposure trials left/right midline and on the bottom row
d.exp$choseSocial <- NA
d.exp$imgLocation <- NA
d.exp$imgLocation <- ifelse((d.exp$face == "eyes_right_90") |
(d.exp$face == "eyes_left_90") |
(d.exp$chosenIdx <= 1),
"midline",
"bottom")
d.exp$choseSocial <- ifelse((d.exp$numPic == 6) & (d.exp$condition =="Social"),
d.exp$faceIdx6 == d.exp$chosenIdx,
d.exp$faceIdx == d.exp$chosenIdx)
## subset exposure trials, extracting only the relevant columns
d.choseSocial <- subset(d.exp, select=c("subid", "itemNum", "choseSocial"))
## now merge with test trials by subid and itemNum (itemNum links exposure to test trials)
d.gaze.tar.all <- merge(d.test, d.choseSocial, by=c("subid", "itemNum"), all=TRUE)
length(unique(d.gaze.tar.all$subid)) # check that all subs are still there
# now get the just the trials on which participants selected the target of eye gaze and the no social condition
d.gaze.tar <- subset(d.gaze.tar.all, choseSocial == TRUE | condition == "No-Social", select=c(subid:choseSocial))
# sanity checks and descriptives
length(unique(d.gaze.tar$subid))
numSubs.exp <- aggregate(correct ~ subid + condition + intervalNum + numPicN, data=d.gaze.tar, FUN=mean)
numSubs.exp.summary <- count(numSubs.exp, vars=c("condition", "intervalNum", "numPicN"))
# now aggregate to get means
mss.gaze.tar <- aggregate(correct ~ trialType + condition + subid + intervalNum + numPicN, data=d.gaze.tar, FUN=mean)
ms.gaze.tar <- aggregate(correct ~ trialType + condition + intervalNum + numPicN, data=mss.gaze.tar, FUN=mean)
ms.gaze.tar$corr.cih <- aggregate(correct ~ trialType + condition + intervalNum + numPicN, data=mss.gaze.tar, FUN=ci.high)$correct
ms.gaze.tar$corr.cil <- aggregate(correct ~ trialType + condition + intervalNum + numPicN, data=mss.gaze.tar, FUN=ci.low)$correct
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
## subset exposure trials, extracting only the relevant columns
d.choseSocial <- subset(d.exp, select=c("subid", "itemNum", "choseSocial"))
## now merge with test trials by subid and itemNum (itemNum links exposure to test trials)
d.gaze.tar.all <- merge(d.test, d.choseSocial, by=c("subid", "itemNum"), all=TRUE)
length(unique(d.gaze.tar.all$subid)) # check that all subs are still there
# now get the just the trials on which participants selected the target of eye gaze and the no social condition
d.gaze.tar <- subset(d.gaze.tar.all, choseSocial == TRUE | condition == "No-Social", select=c(subid:choseSocial))
# sanity checks and descriptives
length(unique(d.gaze.tar$subid))
numSubs.exp <- aggregate(correct ~ subid + condition + intervalNum + numPicN, data=d.gaze.tar, FUN=mean)
numSubs.exp.summary <- count(numSubs.exp, vars=c("condition", "intervalNum", "numPicN"))
# now aggregate to get means
mss.gaze.tar <- aggregate(correct ~ trialType + condition + subid + intervalNum + numPicN, data=d.gaze.tar, FUN=mean)
ms.gaze.tar <- aggregate(correct ~ trialType + condition + intervalNum + numPicN, data=mss.gaze.tar, FUN=mean)
ms.gaze.tar$corr.cih <- aggregate(correct ~ trialType + condition + intervalNum + numPicN, data=mss.gaze.tar, FUN=ci.high)$correct
ms.gaze.tar$corr.cil <- aggregate(correct ~ trialType + condition + intervalNum + numPicN, data=mss.gaze.tar, FUN=ci.low)$correct
m2.n <- glmer(correct ~ trialType * condition * intervalNum * numPicN + (trialType | subid),
data=d.gaze.tar, family=binomial, nAGQ=0)
summary(m2.n)
m2.ns <- glmer(correct ~ (trialType + condition + intervalNum + numPicN)^3 + (trialType | subid),
data=d.gaze.tar, family=binomial, nAGQ=0)
summary(m2.ns)
m2.ln <- glmer(correct ~ trialType + condition + log(intervalNum) + log(numPicN) + (trialType | subid),
data=d.gaze.tar, family=binomial, nAGQ=0)
m2.ln <- glmer(correct ~ trialType + condition + log(intervalNum+1) + log(numPicN) + (trialType | subid),
data=d.gaze.tar, family=binomial, nAGQ=0)
summary(m2.ln)
m2.ln <- glmer(correct ~ trialType * condition * log(intervalNum+1) * log(numPicN) + (trialType | subid),
data=d.gaze.tar, family=binomial, nAGQ=0)
summary(m2.ln)
summary(m2.ln)
m2.ln <- glmer(correct ~ trialType * condition * log2(intervalNum+1) * log2(numPicN) + (trialType | subid),
data=d.gaze.tar, family=binomial, nAGQ=0)
summary(m2.ln)
summary(m2.ln)
m2.ln <- glmer(correct ~ (trialType + condition + log2(intervalNum+1) + log2(numPicN))^2 + (trialType | subid),
data=d.gaze.tar, family=binomial, nAGQ=0)
summary(m2.ln)
m2.lns <- glmer(correct ~ (trialType + condition + log2(intervalNum+1) + log2(numPicN))^3 + (trialType | subid),
data=d.gaze.tar, family=binomial, nAGQ=0)
summary(m2.ln2)
summary(m2.lns)
summary(m2.lns)
rm(list=ls())
source("/Users/kmacdonald/Documents/Projects/SOC_XSIT/r_scripts/soc_xsit_model.R")
library(bootstrap)
library(lme4)
library(ggplot2)
library(arm)
library(directlabels)
library(stringr)
library(plyr)
library(reshape2)
options(device="quartz")
seq(0.25,1,0.25)
seq(.5,2,.5)
seq(2,8,2)
gamma <- seq(.5,2,.5)           # strength of initial encoding
lambda <- 0.1597503             # rate of memory decay
sigma <- seq(0.25,1,0.25)       # amount of belief given to initial hypothesis
int <- c(0, 1, 3, 7)            # number of intervening words
numPic <- seq(2,8,2)            # number of pics
social_boost = .4               # boost to belief - target of eye gaze
## generate probabilites for different parameter values (sigma, number of pics, delay)
probs <- data.frame()
for (i in 1:length(int)){
for (n in 1:length(numPic)) {
for (s in 1:length(sigma)) {
for (g in 1:length(gamma)) {
probs <- rbind(probs,data.frame(p = compute.probs2(gamma[g], lambda, sigma[s], numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma[g],
lambda = lambda,
numPic = numPic[n],
cond ="no-social"))
probs <- rbind(probs,data.frame(p = compute.probs2(gamma[g], lambda, sigma[s]+social_boost, numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma[g],
lambda = lambda,
numPic = numPic[n],
cond = "social"))
}
}
}
}
View(probs)
quartz(width=10,height=6,title = "Simulation 7: Sigma/Gamma + Interval + numPic")
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
position=position_dodge(width=.09),
data=probs) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
quartz(width=10,height=6,title = "Simulation 7: Sigma/Gamma + Interval + numPic")
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
data=probs) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
names(probs)
quartz(width=10,height=6,title = "Simulation 7: Sigma/Gamma + Interval + numPic")
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
data=subset(probs, gamma=0.5) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
subset(probs, gamma=0.5)
d.temp <- subset(probs, gamma=0.5)
rm(d.temp)
quartz(width=10,height=6,title = "Simulation 7: Sigma/Gamma + Interval + numPic")
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
data=subset(probs, gamma==0.5) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
quartz(width=10,height=6,title = "Simulation 7: Sigma/Gamma + Interval + numPic")
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
data=subset(probs, gamma==0.5)) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
length(gamma)
for (g in 1:length(gamma)) {
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
data=subset(probs, gamma==gamma[g])) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
}
for (g in 1:length(gamma)) {
quartz(width=10,height=6,title = "Simulation 7: Sigma + Interval + numPic")
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
data=subset(probs, gamma==gamma[g])) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
}
gamma[1]
gamma==gamma[g]
library(bootstrap)
library(lme4)
library(ggplot2)
library(arm)
library(directlabels)
library(stringr)
library(plyr)
library(reshape2)
library(car)
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
## helper function
inv.logit <- function(x) {1 / (1 + exp(-x))}
d <- read.csv("/Users/kmacdonald/Documents/Projects/SOC_XSIT/processed_data/soc_xsit_expt1_all.csv")
unique(numSubs$subid[duplicated(numSubs$subid)])
numSubs <- aggregate(correct ~ subid + condition + intervalNum + numPicN, data=d, FUN=mean)
numSubs.summary <- count(numSubs, vars=c("condition", "intervalNum", "numPicN"))
length(unique(numSubs$subid))
unique(numSubs$subid[duplicated(numSubs$subid)])
d.test <- subset(d, testTrial==1)
length(unique(d.test$subid))
## get first trials only
d.first.trial <- subset(d, testTrial==1 & first.trial==TRUE)
length(unique(d.first.trial$subid))
## grab exposure trials only
d.exp <- subset(d, exposureTrial==1)
length(unique(d.exp$subid))
d.exp$faceIdx6 <- revalue(d.exp$face, c("eyes_left_90"=0, "eyes_right_90"=1,
"eyes_left"=2, "eyes_down_left"=3,
"eyes_down_right"=4, "eyes_right"=5,
"eyescenter"=-1))
# flag if subject chose target of eye gaze
# exposure trials left/right midline and on the bottom row
d.exp$choseSocial <- NA
d.exp$imgLocation <- NA
d.exp$imgLocation <- ifelse((d.exp$face == "eyes_right_90") |
(d.exp$face == "eyes_left_90") |
(d.exp$chosenIdx <= 1),
"midline",
"bottom")
d.exp$choseSocial <- ifelse((d.exp$numPic == 6) & (d.exp$condition =="Social"),
d.exp$faceIdx6 == d.exp$chosenIdx,
d.exp$faceIdx == d.exp$chosenIdx)
mss.tn <- aggregate(correct ~ trialType + condition + subid + intervalNum + numPicN + trial.num.rev, data=d.test, FUN=mean)
ms.tn <- aggregate(correct ~ trialType + condition + intervalNum + numPicN + trial.num.rev, data=mss.tn, FUN=mean)
ms.tn$corr.cih <- aggregate(correct ~ trialType + condition + intervalNum + numPicN + trial.num.rev, data=mss.tn, FUN=ci.high)$correct
ms.tn$corr.cil <- aggregate(correct ~ trialType + condition + intervalNum + numPicN + trial.num.rev, data=mss.tn, FUN=ci.low)$correct
## graph accuracy with three factors: condition, delay, and trialType
quartz(width=10,height=6,title = "Experiment 2 By Trial Analysis")
qplot(x=trial.num.rev,y=correct, linetype=trialType,
ymin=correct-corr.cil, ymax=correct+corr.cih,
colour=condition,
geom=c("line", "pointrange"),
position=position_dodge(width=.02),
data=ms.tn) +
ylim(0,1) +
xlab("Trial Number") +
ylab("Proportion Correct") +
facet_grid(numPicN ~ intervalNum) +
theme_bw()
d.test <- ddply(d.test, .(subid), function(x) {
#   stopifnot(length(x$trial.num)==8)
x$trial.num.rev <- (1:8)[1:length(x$trial.num)] # still ugly
return(x)
})
mss.tn <- aggregate(correct ~ trialType + condition + subid + intervalNum + numPicN + trial.num.rev, data=d.test, FUN=mean)
ms.tn <- aggregate(correct ~ trialType + condition + intervalNum + numPicN + trial.num.rev, data=mss.tn, FUN=mean)
ms.tn$corr.cih <- aggregate(correct ~ trialType + condition + intervalNum + numPicN + trial.num.rev, data=mss.tn, FUN=ci.high)$correct
ms.tn$corr.cil <- aggregate(correct ~ trialType + condition + intervalNum + numPicN + trial.num.rev, data=mss.tn, FUN=ci.low)$correct
## graph accuracy with three factors: condition, delay, and trialType
quartz(width=10,height=6,title = "Experiment 2 By Trial Analysis")
qplot(x=trial.num.rev,y=correct, linetype=trialType,
ymin=correct-corr.cil, ymax=correct+corr.cih,
colour=condition,
geom=c("line", "pointrange"),
position=position_dodge(width=.02),
data=ms.tn) +
ylim(0,1) +
xlab("Trial Number") +
ylab("Proportion Correct") +
facet_grid(numPicN ~ intervalNum) +
theme_bw()
gamma[1]
for (g in 1:length(gamma)) {
probs <- subset(probs, gamma==gammar[g])
quartz(width=10,height=6,title = "Simulation 7: Sigma + Interval + numPic")
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
data=probs) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
}
for (g in 1:length(gamma)) {
probs <- subset(probs, gamma==gamma[g])
quartz(width=10,height=6,title = "Simulation 7: Sigma + Interval + numPic")
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
data=probs) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
}
