aes(x=int, y=p, colour=cond, linetype=trial.type)) +
geom_point(position=position_jitter(w=0, h=0.01)) +
geom_line(position=position_jitter(w=0, h=0.01)) +
scale_y_continuous(limits = c(0,1.01),breaks=c(0,.25,.5,.75,1), name = "Predicted Prop. Correct") +
scale_x_continuous(limits=c(-.05,7.1), breaks=c(0, 1, 3, 7), name = "Intervening Trials") +
geom_hline(aes(yintercept=1/4),lty=2) +
scale_colour_manual(values=c("firebrick1", "dodgerblue"), name="Experimenal\nCondition") +
scale_linetype_manual("Trial Type", values=c("Switch"=2,"Same"=1)) +
guides(color = guide_legend(keywidth = 2, keyheight = 1, reverse=T)) +
guides(linetype = guide_legend(keywidth = 2, keyheight = 1)) +
theme_bw() +
ggtitle("4-Referent")
ggsave(mem_att, path = "/Users/kmacdonald/Documents/Projects/SOC_XSIT/soc_xsit_plots/",
file="add_mem_att.png", width=5, height=5)
######## SIMULATION 12 - SOCIAL BOOST TO SIGMA  ##########
## Set parameter values
gamma <- 1.5                    # strength of initial encoding
lambda <- 0.15                  # rate of memory decay
sigma <- 0.57                   # amount of belief given to initial hypothesis
int <- c(0,1,3,7)               # number of intervening words
numPic <- 4                     # number of pics
social_boost <- 0.2             # boost to belief in initial hypothesis
## generate probabilites for different parameter values (sigma, number of pics, delay)
probs <- data.frame()
for (i in 1:length(int)){
for (n in 1:length(numPic)) {
for (s in 1:length(sigma)) {
for (g in 1:length(gamma)) {
probs <- rbind(probs,data.frame(p = compute.probs2(gamma[g], lambda, sigma[s], numPic[n], int[i]),
trial.type = c("Same","Switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma[g],
lambda = lambda,
numPic = numPic[n],
cond ="No-social"))
probs <- rbind(probs,data.frame(p = compute.probs2(gamma[g], lambda, sigma[s]+social_boost, numPic[n], int[i]),
trial.type = c("Same","Switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma[g],
lambda = lambda,
numPic = numPic[n],
cond = "Social"))
}
}
}
}
sig_soc_boost <- ggplot(data=subset(probs,gamma=1.5),
aes(x=int, y=p, colour=cond, linetype=trial.type)) +
geom_point() +
geom_line() +
scale_y_continuous(limits = c(0,1.01),breaks=c(0,.25,.5,.75,1), name = "Predicted Prop. Correct") +
scale_x_continuous(limits=c(-.05,7.1), breaks=c(0, 1, 3, 7), name = "Intervening Trials") +
geom_hline(aes(yintercept=1/4),lty=2) +
scale_colour_manual(values=c("firebrick1", "dodgerblue"), name="Experimenal\nCondition") +
scale_linetype_manual("Trial Type", values=c("Switch"=2,"Same"=1)) +
guides(color = guide_legend(keywidth = 2, keyheight = 1, reverse=T)) +
guides(linetype = guide_legend(keywidth = 2, keyheight = 1)) +
theme_bw() +
ggtitle("4-Referent")
ggsave(sig_soc_boost, path = "/Users/kmacdonald/Documents/Projects/SOC_XSIT/soc_xsit_plots/",
file="sig_soc_boost.png", width=5, height=5)
names(d.exp)
rm(list=ls())
rm(list=ls())
library(bootstrap)
library(lme4)
library(ggplot2)
library(arm)
library(directlabels)
library(stringr)
library(plyr)
library(reshape2)
library(car)
options(device="quartz")
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
## helper functions
inv.logit <- function(x) {1 / (1 + exp(-x))} # for checking coefficients in glm
mf_labeller <- function(var, value){
value <- as.character(value)
if (var=="numPicN") {
value[value=="2"] <- "2-Referents"
value[value=="4"] <- "4-Referents"
value[value=="6"] <- "6-Referents"
value[value=="8"] <- "8-Referents"
}
return(value)
}
d <- read.csv("/Users/kmacdonald/Documents/Projects/SOC_XSIT/processed_data/soc_xsit_expt1_master.csv")
ms <- read.csv("/Users/kmacdonald/Documents/Projects/SOC_XSIT/processed_data/replicate_processing/aggregate_soc_xsit.csv")
numSubs <- aggregate(correct ~ subid + condition + intervalNum + numPicN, data=d, FUN=mean)
numSubs.summary <- count(numSubs, vars=c("condition", "intervalNum", "numPicN"))
length(unique(numSubs$subid))
unique(numSubs$subid[duplicated(numSubs$subid)])
d.test <- subset(d, testTrial==1)
length(unique(d.test$subid))
d.first.trial <- subset(d, testTrial==1 & first.trial==TRUE)
length(unique(d.first.trial$subid))
d.exp <- subset(d, exposureTrial==1)
length(unique(d.exp$subid))
d.exp$faceIdx6 <- revalue(d.exp$face, c("eyes_left_90"=0, "eyes_right_90"=1,
"eyes_left"=2, "eyes_down_left"=3,
"eyes_down_right"=4, "eyes_right"=5,
"eyescenter"=-1))
d.exp$choseSocial <- NA
d.exp$imgLocation <- NA
d.exp$imgLocation <- ifelse((d.exp$face == "eyes_right_90") |
(d.exp$face == "eyes_left_90") |
(d.exp$chosenIdx <= 1),
"midline",
"bottom")
d.exp$choseSocial <- ifelse((d.exp$numPic == 6) & (d.exp$condition =="Social"),
d.exp$faceIdx6 == d.exp$chosenIdx,
d.exp$faceIdx == d.exp$chosenIdx)
names(d.exp)
d.choseSocial <- subset(d.exp, select=c("subid", "itemNum", "choseSocial", "rt"))
View(d.choseSocial)
d.gaze.tar.all <- merge(d.test, d.choseSocial, by=c("subid", "itemNum"), all=TRUE)
length(unique(d.gaze.tar.all$subid)) # check that all subs are still there
d.gaze.tar <- subset(d.gaze.tar.all, choseSocial == TRUE | condition == "No-Social", select=c(subid:choseSocial))
length(unique(d.gaze.tar$subid))
numSubs.exp <- aggregate(correct ~ subid + condition + intervalNum + numPicN, data=d.gaze.tar, FUN=mean)
numSubs.exp.summary <- count(numSubs.exp, vars=c("condition", "intervalNum", "numPicN"))
numSubs.exp.summary
qplot(x=intervalNum,y=correct, linetype=trialType,
ymin=correct-corr.cil, ymax=correct+corr.cih,
colour=condition,
geom=c("line", "pointrange"),
position=position_dodge(width=.02),
data=ms.gaze.tar) +
facet_grid(. ~ numPicN, labeller=mf_labeller) +
scale_y_continuous(limits = c(0,1),breaks=c(0,.25,.5,.75,1),
name = "Prop. Choosing Repeated Referent") +
scale_x_continuous(limits=c(-.05,7.1), breaks=c(0, 1, 3, 7),
name = "Intervening Trials") +
geom_hline(aes(yintercept=1/numPicN),lty=2) +
theme_bw() +
scale_color_manual(values=c("firebrick1", "dodgerblue"),
name="Experimenal\nCondition") +
scale_linetype_manual("Trial Type",
values=c("Switch"=2,"Same"=1)) +
guides(color = guide_legend(keywidth = 2, keyheight = 1,
reverse=T)) +
guides(linetype = guide_legend(keywidth = 2, keyheight = 1)) +
theme(legend.position = "top")
mss.gaze.tar <- aggregate(correct ~ trialType + condition + subid + intervalNum + numPicN, data=d.gaze.tar, FUN=mean)
ms.gaze.tar <- aggregate(correct ~ trialType + condition + intervalNum + numPicN, data=mss.gaze.tar, FUN=mean)
ms.gaze.tar$corr.cih <- aggregate(correct ~ trialType + condition + intervalNum + numPicN, data=mss.gaze.tar, FUN=ci.high)$correct
ms.gaze.tar$corr.cil <- aggregate(correct ~ trialType + condition + intervalNum + numPicN, data=mss.gaze.tar, FUN=ci.low)$correct
View(mss.gaze.tar)
View(d.gaze.tar)
d.gaze.tar <- subset(d.gaze.tar.all, choseSocial == TRUE | condition == "No-Social", select=c(subid:rt))
View(d.gaze.tar)
d.choseSocial <- subset(d.exp, select=c("subid", "itemNum", "choseSocial", "rt"))
d.gaze.tar.all <- merge(d.test, d.choseSocial, by=c("subid", "itemNum"), all=TRUE)
length(unique(d.gaze.tar.all$subid)) # check that all subs are still there
View(d.gaze.tar.all)
d.gaze.tar <- subset(d.gaze.tar.all, choseSocial == TRUE | (condition == "No-Social" & dataset=="km"), select=c(subid:rt.y))
length(unique(d.gaze.tar$subid))
View(d.gaze.tar)
numSubs.exp <- aggregate(correct ~ subid + condition + intervalNum + numPicN, data=d.gaze.tar, FUN=mean)
numSubs.exp.summary <- count(numSubs.exp, vars=c("condition", "intervalNum", "numPicN"))
d.acc.rt <- subset(d.gaze.tar.all, choseSocial == TRUE | (condition == "No-Social" & dataset=="km"), select=c(subid:rt.y))
d.choseSocial <- subset(d.exp, select=c("subid", "itemNum", "choseSocial", "rt"))
d.gaze.tar.all <- merge(d.test, d.choseSocial, by=c("subid", "itemNum"), all=TRUE)
length(unique(d.gaze.tar.all$subid)) # check that all subs are still there
d.gaze.tar <- subset(d.gaze.tar.all, choseSocial == TRUE | condition == "No-Social", select=c(subid:rt.y))
length(unique(d.gaze.tar$subid))
numSubs.exp <- aggregate(correct ~ subid + condition + intervalNum + numPicN, data=d.gaze.tar, FUN=mean)
numSubs.exp.summary <- count(numSubs.exp, vars=c("condition", "intervalNum", "numPicN"))
names(d.gaze.tar)
sum(d.gaze.tar$correct)
mean(d.gaze.tar$correct)
d.gaze.tar$correct[log(mss.exp.rt.x.x$rt.x.x) > mean(log(mss.exp.rt.x$rt.x)) + 2* sd(log(mss.exp.rt.x$rt.x)) |
log(mss.exp.rt.x$rt.x) < mean(log(mss.exp.rt.x$rt.x)) - 2* sd(log(mss.exp.rt.x$rt.x))] <- NA
d.gaze.tar$correct[log(mss.exp.rt.x$rt.x.x) > mean(log(mss.exp.rt.x$rt.x)) + 2* sd(log(mss.exp.rt.x$rt.x)) |
log(mss.exp.rt.x$rt.x) < mean(log(mss.exp.rt.x$rt.x)) - 2* sd(log(mss.exp.rt.x$rt.x))] <- NA
mean(d.gaze.tar$correct)
d.gaze.tar$correct[log(d.gaze.tar$rt.x.x) > mean(log(d.gaze.tar$rt.x)) + 2* sd(log(d.gaze.tar$rt.x)) |
log(d.gaze.tar$rt.x) < mean(log(d.gaze.tar$rt.x)) - 2* sd(log(d.gaze.tar$rt.x))] <- NA
d.gaze.tar$correct[log(d.gaze.tar$rt.x) > mean(log(d.gaze.tar$rt.x)) + 2* sd(log(d.gaze.tar$rt.x)) |
log(d.gaze.tar$rt.x) < mean(log(d.gaze.tar$rt.x)) - 2* sd(log(d.gaze.tar$rt.x))] <- NA
mean(d.gaze.tar$correct)
mean(d.gaze.tar$correct, na.rm=T)
mss.gaze.tar <- aggregate(correct ~ trialType + condition + subid + intervalNum + numPicN, data=d.gaze.tar, FUN=mean)
ms.gaze.tar <- aggregate(correct ~ trialType + condition + intervalNum + numPicN, data=mss.gaze.tar, FUN=mean)
ms.gaze.tar$corr.cih <- aggregate(correct ~ trialType + condition + intervalNum + numPicN, data=mss.gaze.tar, FUN=ci.high)$correct
ms.gaze.tar$corr.cil <- aggregate(correct ~ trialType + condition + intervalNum + numPicN, data=mss.gaze.tar, FUN=ci.low)$correct
quartz(width=10,height=6,title = "Experiment 2 Accuracy: Filtered")
acc_plot <- qplot(x=intervalNum,y=correct, linetype=trialType,
ymin=correct-corr.cil, ymax=correct+corr.cih,
colour=condition,
geom=c("line", "pointrange"),
position=position_dodge(width=.02),
data=ms.gaze.tar) +
facet_grid(. ~ numPicN, labeller=mf_labeller) +
scale_y_continuous(limits = c(0,1),breaks=c(0,.25,.5,.75,1),
name = "Prop. Choosing Repeated Referent") +
scale_x_continuous(limits=c(-.05,7.1), breaks=c(0, 1, 3, 7),
name = "Intervening Trials") +
geom_hline(aes(yintercept=1/numPicN),lty=2) +
theme_bw() +
scale_color_manual(values=c("firebrick1", "dodgerblue"),
name="Experimenal\nCondition") +
scale_linetype_manual("Trial Type",
values=c("Switch"=2,"Same"=1)) +
guides(color = guide_legend(keywidth = 2, keyheight = 1,
reverse=T)) +
guides(linetype = guide_legend(keywidth = 2, keyheight = 1)) +
theme(legend.position = "top")
View(ms.gaze.tar)
View(ms)
mss.gaze.tar <- aggregate(correct ~ trialType + condition + subid + intervalNum + numPicN, data=d.gaze.tar, FUN=mean)
ms.gaze.tar <- aggregate(correct ~ trialType + condition + intervalNum + numPicN, data=mss.gaze.tar, FUN=mean)
ms.gaze.tar$corr.cih <- aggregate(correct ~ trialType + condition + intervalNum + numPicN, data=mss.gaze.tar, FUN=ci.high)$correct
ms.gaze.tar$corr.cil <- aggregate(correct ~ trialType + condition + intervalNum + numPicN, data=mss.gaze.tar, FUN=ci.low)$correct
View(ms.gaze.tar)
qplot(x=intervalNum,y=correct, linetype=trialType,
ymin=correct-corr.cil, ymax=correct+corr.cih,
colour=condition,
geom=c("line", "pointrange"),
position=position_dodge(width=.02),
data=ms.gaze.tar) +
facet_grid(. ~ numPicN, labeller=mf_labeller) +
scale_y_continuous(limits = c(0,1),breaks=c(0,.25,.5,.75,1),
name = "Prop. Choosing Repeated Referent") +
scale_x_continuous(limits=c(-.05,7.1), breaks=c(0, 1, 3, 7),
name = "Intervening Trials") +
geom_hline(aes(yintercept=1/numPicN),lty=2) +
theme_bw() +
scale_color_manual(values=c("firebrick1", "dodgerblue"),
name="Experimenal\nCondition") +
scale_linetype_manual("Trial Type",
values=c("Switch"=2,"Same"=1)) +
guides(color = guide_legend(keywidth = 2, keyheight = 1,
reverse=T)) +
guides(linetype = guide_legend(keywidth = 2, keyheight = 1)) +
theme(legend.position = "top")
View(d.gaze.tar.all)
count(d.gaze.tar$correct=="NA")
View(d.gaze.tar)
count(d.gaze.tar$correct=="NA")
count(d.gaze.tar$correct)
d.choseSocial <- subset(d.exp, select=c("subid", "itemNum", "choseSocial", "rt"))
d.gaze.tar.all <- merge(d.test, d.choseSocial, by=c("subid", "itemNum"), all=TRUE)
length(unique(d.gaze.tar.all$subid)) # check that all subs are still there
d.gaze.tar <- subset(d.gaze.tar.all, choseSocial == TRUE | condition == "No-Social", select=c(subid:rt.y))
length(unique(d.gaze.tar$subid))
numSubs.exp <- aggregate(correct ~ subid + condition + intervalNum + numPicN, data=d.gaze.tar, FUN=mean)
numSubs.exp.summary <- count(numSubs.exp, vars=c("condition", "intervalNum", "numPicN"))
count(d.gaze.tar$correct)
d.gaze.tar$correct[log(d.gaze.tar$rt.x) > mean(log(d.gaze.tar$rt.x)) + 2* sd(log(d.gaze.tar$rt.x)) |
log(d.gaze.tar$rt.x) < mean(log(d.gaze.tar$rt.x)) - 2* sd(log(d.gaze.tar$rt.x))] <- NA
count(d.gaze.tar$correct)
d.gaze.tar$correct[log(d.gaze.tar$rt.y) > mean(log(d.gaze.tar$rt.y)) + 2* sd(log(d.gaze.tar$rt.y)) |
log(d.gaze.tar$rt.y) < mean(log(d.gaze.tar$rt.y)) - 2* sd(log(d.gaze.tar$rt.y))] <- NA
count(d.gaze.tar$correct)
View(d.gaze.tar)
mean(log(d.gaze.tar$rt.y)
)
mean(log(d.gaze.tar$rt.y)
mean(log(d.gaze.tar$rt.y))
mean(log(d.gaze.tar$rt.y))
mean(log(d.gaze.tar$rt.x))
sd(log(d.gaze.tar$rt.y))
log(d.gaze.tar$rt.y)
mean(log(d.gaze.tar$rt.y, na.rm=T))
mean(log(d.gaze.tar$rt.y),na.rm=T)
log(d.gaze.tar$rt.y)
mean(log(d.gaze.tar$rt.y),na.rm=T)
mean(log(d.gaze.tar$rt.x))
?mean()
??mean()
mean(log(d.gaze.tar$rt.y),na.rm=T)
mean(log(mss.exp.rt$rt))
mss.exp.rt <- aggregate(rt ~  + condition + subid + intervalNum + numPicN, data=d.exp, FUN=mean)
mean(log(mss.exp.rt$rt))
View(mss.exp.rt)
mean(1, 2, 3)
mean(6)
mean(d.gaze.tar$correct)
mean(d.gaze.tar$correct, na.rm=T)
mean(log(d.gaze.tar$rt.x),na.rm=TRUE)
View(d.gaze.tar)
mean(log(d.gaze.tar$rt.y),na.rm=TRUE)
d.gaze.tar$rt.y
log(d.gaze.tar$rt.y)
sd(log(d.gaze.tar$rt.y, na.rm=T))
sd(log(d.gaze.tar$rt.y), na.rm=T)
sd(log(d.gaze.tar$rt.y))
str(d.gaze.tar)
is.na(d.gaze.tar$rt.y)
x <- 25
log(x)
x <- c(25, 20)
log(x)
x <- c(25, 20, "NA")
is.na(x)
log*x
log(x)
log(as.numeric(x))
as.numeric(x)
x
log(x)
is.numeric(x)
x <- as.numeric(x)
x
log(x)
log(x, na.rm=T)
mean(log(x))
mean(log(x),na.rm=T)
mean(log(d.gaze.tar$rt.y))
mean(log(d.gaze.tar$rt.y), na.rm=T)
x <- log(d.gaze.tar$rt.y)
x
tail(x)
head(x)
mean(x)
mean(x,na.rm=T)
sum(x)
sum(x,na.rm=T)
View(x)
max(x)
max(x,na.rm=T)
min(x,na.rm=T)
min(d.gaze.tar$rt.y)
min(d.gaze.tar$rt.y, na.rm=T)
max(d.gaze.tar$rt.y, na.rm=T)
log(0)
log(.01)
?count()
count(d.gaze.tar$rt.y, 0)
count(d.gaze.tar$rt.y, vars=0)
count(d.gaze.tar$rt.y)
length(unique(d.gaze.tar$rt.y))
d.gaze.tar$rt.y[d.gaze.tar$rt.y==0] <- NA
length(unique(d.gaze.tar$rt.y))
is.na(d.gaze.tar$rt.y)
log(d.gaze.tar$rt.y)
mean(log(d.gaze.tar$rt.y), na.rm=T)
d.gaze.tar.all <- merge(d.test, d.choseSocial, by=c("subid", "itemNum"), all=TRUE)
length(unique(d.gaze.tar.all$subid)) # check that all subs are still there
d.gaze.tar <- subset(d.gaze.tar.all, choseSocial == TRUE | condition == "No-Social", select=c(subid:rt.y))
length(unique(d.gaze.tar$subid))
numSubs.exp <- aggregate(correct ~ subid + condition + intervalNum + numPicN, data=d.gaze.tar, FUN=mean)
numSubs.exp.summary <- count(numSubs.exp, vars=c("condition", "intervalNum", "numPicN"))
count(d.gaze.tar$correct)
d.gaze.tar$correct[log(d.gaze.tar$rt.x) > mean(log(d.gaze.tar$rt.x)) + 2* sd(log(d.gaze.tar$rt.x)) |
log(d.gaze.tar$rt.x) < mean(log(d.gaze.tar$rt.x)) - 2* sd(log(d.gaze.tar$rt.x))] <- NA
count(d.gaze.tar$correct)
d.gaze.tar$rt.y[d.gaze.tar$rt.y==0] <- NA
d.gaze.tar$correct[log(d.gaze.tar$rt.y) > mean(log(d.gaze.tar$rt.y), na.rm=T) + 2* sd(log(d.gaze.tar$rt.y), na.rm=T) |
log(d.gaze.tar$rt.y) < mean(log(d.gaze.tar$rt.y), na.rm=T) - 2* sd(log(d.gaze.tar$rt.y), na.rm=T)] <- NA
count(d.gaze.tar$correct)
?aggreate()
?aggregate()
mss.gaze.tar <- aggregate(correct ~ trialType + condition + subid + intervalNum + numPicN, data=d.gaze.tar, FUN=mean, na.action = na.omit)
ms.gaze.tar <- aggregate(correct ~ trialType + condition + intervalNum + numPicN, data=mss.gaze.tar, FUN=mean, na.action = na.omit)
ms.gaze.tar$corr.cih <- aggregate(correct ~ trialType + condition + intervalNum + numPicN, data=mss.gaze.tar, FUN=ci.high, na.action = na.omit)$correct
ms.gaze.tar$corr.cil <- aggregate(correct ~ trialType + condition + intervalNum + numPicN, data=mss.gaze.tar, FUN=ci.low, na.action = na.omit)$correct
qplot(x=intervalNum,y=correct, linetype=trialType,
ymin=correct-corr.cil, ymax=correct+corr.cih,
colour=condition,
geom=c("line", "pointrange"),
position=position_dodge(width=.02),
data=ms.gaze.tar) +
facet_grid(. ~ numPicN, labeller=mf_labeller) +
scale_y_continuous(limits = c(0,1),breaks=c(0,.25,.5,.75,1),
name = "Prop. Choosing Repeated Referent") +
scale_x_continuous(limits=c(-.05,7.1), breaks=c(0, 1, 3, 7),
name = "Intervening Trials") +
geom_hline(aes(yintercept=1/numPicN),lty=2) +
theme_bw() +
scale_color_manual(values=c("firebrick1", "dodgerblue"),
name="Experimenal\nCondition") +
scale_linetype_manual("Trial Type",
values=c("Switch"=2,"Same"=1)) +
guides(color = guide_legend(keywidth = 2, keyheight = 1,
reverse=T)) +
guides(linetype = guide_legend(keywidth = 2, keyheight = 1)) +
theme(legend.position = "top")
ggsave(acc_plot, path = "/Users/kmacdonald/Documents/Projects/SOC_XSIT/soc_xsit_plots/",
file="accuracy.png", width=7.5, height=5)
count(d.gaze.tar$correct)
View(d.exp)
count(d.exp$imgLocation)
count(d.exp$face)
d.exp <- subset(d, exposureTrial==1)
d.exp$faceIdx6 <- revalue(d.exp$face, c("eyes_left_90"=0, "eyes_right_90"=1,
"eyes_left"=2, "eyes_down_left"=3,
"eyes_down_right"=4, "eyes_right"=5,
"eyescenter"=-1))
d.exp$choseSocial <- NA
d.exp$imgLocation <- NA
d.exp$imgLocation <- ifelse((d.exp$face == "eyes_right_90") |
(d.exp$face == "eyes_left_90") |
(d.exp$chosenIdx <= 1),
"midline",
ifelse((d.exp$face == "eyes_up_left") |
(d.exp$face == "eyes_up_mid_left") |
(d.exp$face == "eyes_up_mid_right") |
(d.exp$face == "eyes_up_right"),
"top",
"bottom"))
View(d.exp)
count(d.exp$imgLocation)
count(d.exp$face)
d.exp$imgLocation <- ifelse((d.exp$face == "eyes_right_90") |
(d.exp$face == "eyes_left_90") |
(d.exp$face == "eyes_center" & d.exp$chosenIdx <= 1),
"midline",
ifelse((d.exp$face == "eyes_up_left") |
(d.exp$face == "eyes_up_mid_left") |
(d.exp$face == "eyes_up_mid_right") |
(d.exp$face == "eyes_up_right"),
"top",
"bottom"))
count(d.exp$face)
count(d.exp$imgLocation)
View(d.exp)
d.exp$imgLocation <- ifelse((d.exp$face == "eyes_right_90") |
(d.exp$face == "eyes_left_90") |
(d.exp$face == "eyes_center" & d.exp$chosenIdx <= 1),
"midline",
ifelse((d.exp$face == "eyes_up_left") |
(d.exp$face == "eyes_up_mid_left") |
(d.exp$face == "eyes_up_mid_right") |
(d.exp$face == "eyes_up_right") |
(d.exp$face == "eyes_center" $ d.exp$choseIdx <=3),
"top",
"bottom"))
d.exp$imgLocation <- ifelse((d.exp$face == "eyes_right_90") |
(d.exp$face == "eyes_left_90") |
(d.exp$face == "eyes_center" & d.exp$chosenIdx <= 1),
"midline",
ifelse((d.exp$face == "eyes_up_left") |
(d.exp$face == "eyes_up_mid_left") |
(d.exp$face == "eyes_up_mid_right") |
(d.exp$face == "eyes_up_right") |
(d.exp$face == "eyes_center" & d.exp$choseIdx <=3),
"top",
"bottom"))
count(d.exp$imgLocation)
d.exp$imgLocation <- NA
d.exp$imgLocation <- ifelse((d.exp$face == "eyes_right_90") |
(d.exp$face == "eyes_left_90") |
(d.exp$face == "eyes_center" & d.exp$chosenIdx <= 1),
"midline",
ifelse((d.exp$face == "eyes_up_left") |
(d.exp$face == "eyes_up_mid_left") |
(d.exp$face == "eyes_up_mid_right") |
(d.exp$face == "eyes_up_right") |
(d.exp$face == "eyes_center" & d.exp$choseIdx <=3),
"top",
"bottom"))
count(d.exp$imgLocation)
d.exp$imgLocation <- NA
d.exp$imgLocation <- ifelse((d.exp$face == "eyes_right_90") |
(d.exp$face == "eyes_left_90") |
(d.exp$face == "eyes_center" & d.exp$chosenIdx <= 1),
"midline",
ifelse((d.exp$face == "eyes_up_left") |
(d.exp$face == "eyes_up_mid_left") |
(d.exp$face == "eyes_up_mid_right") |
(d.exp$face == "eyes_up_right") |
(d.exp$face == "eyes_center" & d.exp$chosenIdx <= 3),
"top",
"bottom"))
count(d.exp$imgLocation)
d.exp$choseSocial <- ifelse((d.exp$numPic == 6) & (d.exp$condition =="Social"),
d.exp$faceIdx6 == d.exp$chosenIdx,
d.exp$faceIdx == d.exp$chosenIdx)
d.choseDirection <- subset(d.exp, select=c("subid", "itemNum", "face",
d.direction <- merge(d.test, d.choseDirection, by=c("subid", "itemNum"), all=TRUE)
d.direction <- subset(d.direction, numPicN==6, select=c(subid:imgLocation))
d.choseDirection <- subset(d.exp, select=c("subid", "itemNum", "face",
"choseSocial", "imgLocation"))
d.direction <- merge(d.test, d.choseDirection, by=c("subid", "itemNum"), all=TRUE)
d.direction <- subset(d.direction, numPicN==6, select=c(subid:imgLocation))
d.direction <- subset(d.direction, choseSocial == TRUE | condition=="No-Social", select=c(subid:imgLocation))
length(unique(d.direction$subid))
numSubs.direction <- aggregate(correct ~ subid + condition + intervalNum + numPicN, data=d.direction, FUN=mean)
numSubs.direction.summary <- count(numSubs.direction, vars=c("condition", "intervalNum", "numPicN"))
mss.direction <- aggregate(correct ~ trialType + condition + subid + intervalNum + imgLocation, data=d.direction, FUN=mean)
ms.direction <- aggregate(correct ~ trialType + condition + intervalNum + imgLocation, data=mss.direction, FUN=mean)
ms.direction$corr.cih <- aggregate(correct ~ trialType + condition + intervalNum + imgLocation, data=mss.direction, FUN=ci.high)$correct
ms.direction$corr.cil <- aggregate(correct ~ trialType + condition + intervalNum + imgLocation, data=mss.direction, FUN=ci.low)$correct
quartz(width=10,height=6,title = "Experiment 2 Accuracy: Image Location Facet")
qplot(x=intervalNum,y=correct, linetype=trialType,
ymin=correct-corr.cil, ymax=correct+corr.cih,
colour=imgLocation,
geom=c("line", "pointrange"),
position=position_dodge(width=.02),
data=ms.direction) +
facet_grid(. ~ condition) +
scale_y_continuous(limits = c(0,1),breaks=c(0,.25,.5,.75,1),
name = "Prop. Choosing Repeated Referent") +
scale_x_continuous(limits=c(-.05,7.1), breaks=c(0, 1, 3, 7),
name = "Intervening Trials") +
theme_bw()
View(ms.direction)
View(d.direction)
numSubs.direction.summary
numSubs.direction.summary <- count(numSubs.direction, vars=c("condition", "intervalNum", "numPicN", "imgLocation"))
numSubs.direction <- aggregate(correct ~ subid + condition + intervalNum + numPicN + imgLocation, data=d.direction, FUN=mean)
numSubs.direction.summary <- count(numSubs.direction, vars=c("condition", "intervalNum", "numPicN", "imgLocation"))
numSubs.direction.summary
