scale_y_continuous(limits = c(0,1),breaks=c(0,.25,.5,.75,1),
name = "Predicted Proportion Correct") +
theme_bw(base_size=16) +
# scale_color_manual(values=c("dark gray","#808080","#333333","#626262" )) +
geom_line(aes(group=variable,y=ProportionCorrect),lty=1,size=1.3) +
theme(axis.title.y=element_text(vjust=0.1)) +
theme(axis.title.x=element_text(vjust=-0.5)) +
scale_color_discrete(name="Trial Type") +
theme(legend.position=c(.9, .6))
q
Social Information and Cross-Situational Learning: Model
========================================================
```{r load packages}
rm(list=ls())
library(bootstrap)
library(lme4)
library(ggplot2)
library(arm)
library(directlabels)
library(stringr)
library(plyr)
library(reshape2)
```
Put model in function and wrap in loops to generate predictions for different parameter values and trial types
```{r model}
## Parameter values
gamma <- 1.609619 # strength of initial encoding
lambda <- 0.1597503 # rate of memory decay
sigma <- c(0.25, 0.5653685, 0.75, 1) # amount of attention given to initial hypothesis
int <-  3 # number of intervening words
numPic <- 4 # number of pics
## Wrap model in function, so I can pass paramemters
compute.probs <- function(gamma, lambda, sigma, numPic, int) {
sn <- gamma * sigma * (int+1)^-lambda
on <- gamma * ((1-sigma) / (numPic-1))*(int+1)^-lambda;
wn <- on/4;
# probability correct on same trials (set ceiling value for p_0 at 1)
if(sn <= 1) {
p_s <- mean(rbinom(100000,1,sn + (1-sn)/numPic))
} else {
p_s <- mean(rbinom(100000,1,1))
}
# probability correct on switch trials
p_o <- mean(rbinom(100000,1,on + (1-on)/numPic))
return(c(p_s, p_o))
}
## loops to generate probabilites for different parameter values
probs <- data.frame(matrix(nrow=length(sigma), ncol=2))
colnames(probs) <- c("ProbCorrectSame", "ProbCorrectSwitch")
for (i in 1:length(sigma)) {
probs[i,] <- compute.probs(gamma, lambda, sigma[i], numPic, int)
}
```
Now plot
```{r df for plotting}
# create data frame for plotting
df.plotting <- cbind(probs, sigma)
df.plotting <- melt(df.plotting, id = "sigma", value.name = "ProportionCorrect")
# convert sigma to factor for plotting
df.plotting$sigma <- as.factor(df.plotting$sigma)
# now plot
q <- ggplot(df.plotting, aes(x=sigma, y=ProportionCorrect, color=variable, size=1.5)) +
geom_point(aes(size = 1.3)) +
guides(size=FALSE) +
geom_hline(yintercept=0.25, linetype="dashed")  +
#geom_line(aes(y=correct,colour=trialType),data=newdat, lty=1) +
xlab("Sigma Value") +
scale_y_continuous(limits = c(0,1),breaks=c(0,.25,.5,.75,1),
name = "Predicted Proportion Correct") +
theme_bw(base_size=16) +
# scale_color_manual(values=c("dark gray","#808080","#333333","#626262" )) +
geom_line(aes(group=variable,y=ProportionCorrect),lty=1,size=1.3) +
theme(axis.title.y=element_text(vjust=0.1)) +
theme(axis.title.x=element_text(vjust=-0.5)) +
scale_color_discrete(name="Trial Type") +
theme(legend.position=c(.9, .6))
# scale_color_grey(start=.2,end=.5)
```
q
q <- ggplot(df.plotting, aes(x=sigma, y=ProportionCorrect, color=variable, size=1.5)) +
geom_point(aes(size = 1.3)) +
guides(size=FALSE) +
geom_hline(yintercept=0.25, linetype="dashed")  +
xlab("Sigma Value (Amount of Attention to Initial Hypothesis)") +
scale_y_continuous(limits = c(0,1),breaks=c(0,.25,.5,.75,1),
name = "Predicted Proportion Correct") +
theme_bw(base_size=16) +
geom_line(aes(group=variable,y=ProportionCorrect),lty=1,size=1.3) +
theme(axis.title.y=element_text(vjust=0.1)) +
theme(axis.title.x=element_text(vjust=-0.5)) +
scale_color_discrete(name="Trial Type") +
theme(legend.position=c(.9, .6))
q
# now plot
q <- ggplot(df.plotting, aes(x=sigma, y=ProportionCorrect, color=variable, size=1.5)) +
geom_point(aes(size = 1.3)) +
guides(size=FALSE) +
geom_hline(yintercept=0.25, linetype="dashed")  +
xlab("Sigma Value (Amount of Attention Given to Initial Hypothesis)") +
scale_y_continuous(limits = c(0,1),breaks=c(0,.25,.5,.75,1),
name = "Predicted Proportion Correct") +
theme_bw(base_size=16) +
geom_line(aes(group=variable,y=ProportionCorrect),lty=1,size=1.3) +
theme(axis.title.y=element_text(vjust=0.1)) +
theme(axis.title.x=element_text(vjust=-0.5)) +
scale_color_discrete(name="Trial Type") +
theme(legend.position=c(.9, .6))
q
ggplot(df.plotting, aes(x=sigma, y=ProportionCorrect, color=variable, size=1.5)) +
geom_point(aes(size = 1.3)) +
guides(size=FALSE) +
geom_hline(yintercept=0.25, linetype="dashed")  +
xlab("Sigma Value (Amount of Attention Given to Initial Hypothesis)") +
scale_y_continuous(limits = c(0,1),breaks=c(0,.25,.5,.75,1),
name = "Predicted Proportion Correct") +
theme_bw(base_size=16) +
geom_line(aes(group=variable,y=ProportionCorrect),lty=1,size=1.3) +
theme(axis.title.y=element_text(vjust=0.1)) +
theme(axis.title.x=element_text(vjust=-0.5)) +
scale_color_discrete(name="Trial Type") +
theme(legend.position=c(.8, .6))
## simple instantiation of Blythe et al. (2010)
# each situation is 1 word, 1 + M objects
########## FUNCTIONS ###########
## generate individual situation
generate.sit <- function (n.words, n.objs, ambiguity) {
w <- sample(1:n.words, 1)
corr.o <- w
other.objs <- setdiff(1:n.words,w)
dist.os <- sample(other.objs, ambiguity)
return(c(w,corr.o,dist.os))
}
## update the lexicon
update.lex <- function (lexicon,sit) {
for (i in 2:(length(sit))) {
lexicon[sit[1],sit[i]] <- lexicon[sit[1],sit[i]] + 1
}
return(lexicon)
}
## normalize
normalize.lex <- function (lexicon) {
ps <- matrix(nrow=nrow(lexicon),ncol=ncol(lexicon))
for (i in 1:nrow(lexicon)) {
ps[i,] <- lexicon[i,]/sum(lexicon[i,])
}
return(ps)
}
## learn a lexicon from a generated corpus of situations
learn.lex <- function (n.words=10, n.sits=100, ambiguity=4) {
n.objs <- n.words # always symmetric
## generate situations: matrix of word + correct obj + incorrect objs
sits <- matrix(0,nrow=n.sits,ncol=1 + 1 + ambiguity) # word, correct object, other objects
for (i in 1:n.sits) {
sits[i,] <- generate.sit(n.words,n.objs,ambiguity)
}
## walk through situations and learn
lexicon <- matrix(0,nrow=n.words,ncol=n.objs) # matrix of zeros, w x o
for (i in 1:n.sits) {
lexicon <- update.lex(lexicon,sits[i,])
}
## normalize lexicon
ps <- normalize.lex(lexicon)
return(lexicon)
}
########## ACTUAL MODEL ###########
lexicon <- learn.lex()
image(lexicon)
lexicon
?image
normalize.lex
q
df.plotting
df.plotting
df.plotting <- cbind(probs, sigma, int)
df.plotting
for (i in 1:length(int)){
int[i]
for (j in 1:length(sigma)) {
probs[j,] <- compute.probs(gamma, lambda, sigma[j], numPic, int)
}
}
probs
int
int <-  c(0, 1, 3, 7, 100) # number of intervening words
for (i in 1:length(int)){
int[i]
for (j in 1:length(sigma)) {
probs[j,] <- compute.probs(gamma, lambda, sigma[j], numPic, int)
}
}
probs
sit
sits
for (i in 1:length(int)){
for (j in 1:length(sigma)) {
probs[j,] <- compute.probs(gamma, lambda, sigma[j], numPic, int[i])
}
}
probs
length(int)
length(sigma)
probs[1,]
for (i in 1:length(int)){
for (j in 1:length(sigma)) {
probs[i,] <- compute.probs(gamma, lambda, sigma[j], numPic, int[i])
}
}
probs
n.words
lexicon
prob <- data.frame(matrix(nrow= length(sigma) * length(int), ncol = 2))
probs.temp <- data.frame(matrix(nrow = length(sigma), ncol = 2))
prob <- data.frame(matrix(nrow= length(sigma) * length(int), ncol = 2))
colnames(probs) <- c("ProbCorrectSame", "ProbCorrectSwitch")
probs
probs <- data.frame(matrix(nrow= length(sigma) * length(int), ncol = 2))
probs
probs.temp <- data.frame(matrix(nrow = length(sigma), ncol = 2))
probs <- data.frame(matrix(nrow= length(sigma) * length(int), ncol = 2))
colnames(probs) <- c("ProbCorrectSame", "ProbCorrectSwitch")
for (i in 1:length(int)){
for (j in 1:length(sigma)) {
probs.temp[j,] <- compute.probs(gamma, lambda, sigma[j], numPic, int[i])
}
probs[i,] <- probs.temp
}
probs
probs.temp
for (i in 1:length(int)){
for (j in 1:length(sigma)) {
probs.temp[j,] <- compute.probs(gamma, lambda, sigma[j], numPic, int[i])
}
probs <- cbind(probs, probs.temp)
}
probs.temp <- data.frame(matrix(nrow = length(sigma), ncol = 2))
probs <- data.frame(matrix(nrow= length(sigma) * length(int), ncol = 2))
colnames(probs) <- c("ProbCorrectSame", "ProbCorrectSwitch")
for (i in 1:length(int)){
for (j in 1:length(sigma)) {
probs.temp[j,] <- compute.probs(gamma, lambda, sigma[j], numPic, int[i])
}
probs <- cbind(probs, probs.temp)
}
probs
probs.temp <- data.frame(matrix(nrow = length(sigma), ncol = 2))
probs <- data.frame(matrix(nrow= length(sigma) * length(int), ncol = 2))
colnames(probs) <- c("ProbCorrectSame", "ProbCorrectSwitch")
for (i in 1:length(int)){
for (j in 1:length(sigma)) {
probs.temp[j,] <- compute.probs(gamma, lambda, sigma[j], numPic, int[i])
}
probs <- rbind(probs, probs.temp)
}
probs.temp <- data.frame(matrix(nrow = length(sigma), ncol = 2))
probs <- data.frame(matrix(nrow= length(sigma) * length(int), ncol = 2))
for (i in 1:length(int)){
for (j in 1:length(sigma)) {
probs.temp[j,] <- compute.probs(gamma, lambda, sigma[j], numPic, int[i])
}
probs <- rbind(probs, probs.temp)
}
probs
rm(probs)
rm(probs.temp)
for (i in 1:length(int)){
for (j in 1:length(sigma)) {
probs.temp[j,] <- compute.probs(gamma, lambda, sigma[j], numPic, int[i])
}
probs <- rbind(probs, probs.temp)
}
probs.temp <- data.frame(matrix(nrow = length(sigma), ncol = 2))
for (i in 1:length(int)){
for (j in 1:length(sigma)) {
probs.temp[j,] <- compute.probs(gamma, lambda, sigma[j], numPic, int[i])
}
probs <- rbind(probs, probs.temp)
}
?rbind
for (j in 1:length(sigma)) {
probs.temp[j,] <- compute.probs(gamma, lambda, sigma[j], numPic, int[i])
probs.temp[j, 3] <- int[i]
probs.temp[j, 4] <- sigma[j]
}
prob.temps
probs.temp <- data.frame(matrix(nrow = length(sigma), ncol = 4))
probs.temp
for (i in 1:length(int)){
for (j in 1:length(sigma)) {
probs.temp[j,] <- compute.probs(gamma, lambda, sigma[j], numPic, int[i])
probs.temp[j, 3] <- int[i]
probs.temp[j, 4] <- sigma[j]
}
probs <- rbind(probs, probs.temp)
}
probs <- data.frame(matrix(nrow = length(sigma) * length(int), ncol = 3))
probs.temp <- data.frame(matrix(nrow = length(sigma), ncol = 4))
probs <- data.frame(matrix(nrow = length(sigma) * length(int), ncol = 4))
for (i in 1:length(int)){
for (j in 1:length(sigma)) {
probs.temp[j,] <- compute.probs(gamma, lambda, sigma[j], numPic, int[i])
probs.temp[j, 3] <- int[i]
probs.temp[j, 4] <- sigma[j]
}
probs <- rbind(probs, probs.temp)
}
probs
colnames(probs) <- c("Prob Correct Same", "Prob Correct Switch", "Interval", "Sigma")
probs
colnames(probs) <- c("ProbCorrectSame", "ProbCorrectSwitch", "Interval", "Sigma")
?append
?merge
probs.temp <- data.frame(matrix(nrow = length(sigma), ncol = 4))
probs <- data.frame(matrix(nrow = length(sigma) * length(int), ncol = 4))
colnames(probs) <- c("ProbCorrectSame", "ProbCorrectSwitch", "Interval", "Sigma")
for (i in 1:length(int)){
for (j in 1:length(sigma)) {
probs.temp[j,] <- compute.probs(gamma, lambda, sigma[j], numPic, int[i])
probs.temp[j, 3] <- int[i]
probs.temp[j, 4] <- sigma[j]
}
probs <- merge(probs, probs.temp)
}
probs
for (i in 1:length(int)){
for (j in 1:length(sigma)) {
probs.temp[j,] <- compute.probs(gamma, lambda, sigma[j], numPic, int[i])
probs.temp[j, 3] <- int[i]
probs.temp[j, 4] <- sigma[j]
}
probs <- append(probs, probs.temp)
}
probs
probs.temp <- data.frame(matrix(nrow = length(sigma), ncol = 4))
probs <- data.frame(matrix(nrow = length(sigma) * length(int), ncol = 4))
colnames(probs) <- c("ProbCorrectSame", "ProbCorrectSwitch", "Interval", "Sigma")
for (i in 1:length(int)){
for (j in 1:length(sigma)) {
probs.temp[j,] <- compute.probs(gamma, lambda, sigma[j], numPic, int[i])
probs.temp[j, 3] <- int[i]
probs.temp[j, 4] <- sigma[j]
}
probs <- rbind(probs, probs.temp)
}
probs
probs.temp <- data.frame(matrix(nrow = length(sigma), ncol = 4))
probs <- data.frame(matrix(nrow = length(sigma) * length(int), ncol = 4))
for (i in 1:length(int)){
for (j in 1:length(sigma)) {
probs.temp[j,] <- compute.probs(gamma, lambda, sigma[j], numPic, int[i])
probs.temp[j, 3] <- int[i]
probs.temp[j, 4] <- sigma[j]
}
probs <- rbind(probs, probs.temp)
}
colnames(probs) <- c("ProbCorrectSame", "ProbCorrectSwitch", "Interval", "Sigma")
probs
probs <- dd<-data.frame(X1=numeric(0),X2=numeric(0),X3=numeric(0))
probs <-data.frame(X1=numeric(0),X2=numeric(0),X3=numeric(0))
probs
probs <-data.frame(ProbCorrectSame=numeric(0),X2=numeric(0),X3=numeric(0))
probs
probs <-data.frame(ProbCorrectSame=numeric(0), ProbCorrectSwitch=numeric(0), Interval=numeric(0), Sigma=numeric(0))
probs.temp <- data.frame(matrix(nrow = length(sigma), ncol = 4))
for (i in 1:length(int)){
for (j in 1:length(sigma)) {
probs.temp[j,] <- compute.probs(gamma, lambda, sigma[j], numPic, int[i])
probs.temp[j, 3] <- int[i]
probs.temp[j, 4] <- sigma[j]
}
probs <- rbind(probs, probs.temp)
}
probs
colnames(probs) <- c("ProbCorrectSame", "ProbCorrectSwitch", "Interval", "Sigma")
probs
df.plotting <- colnames(probs) <- c("ProbCorrectSame", "ProbCorrectSwitch", "Interval", "Sigma")
ggplot(df.plotting, aes(x=sigma, y=ProportionCorrect, color=variable, size=1.5)) +
geom_point(aes(size = 1.3)) +
guides(size=FALSE) +
geom_hline(yintercept=0.25, linetype="dashed")  +
xlab("Sigma Value (Amount of Attention Given to Initial Hypothesis)") +
scale_y_continuous(limits = c(0,1),breaks=c(0,.25,.5,.75,1),
name = "Predicted Proportion Correct") +
theme_bw(base_size=16) +
geom_line(aes(group=variable,y=ProportionCorrect),lty=1,size=1.3) +
theme(axis.title.y=element_text(vjust=0.1)) +
theme(axis.title.x=element_text(vjust=-0.5)) +
scale_color_discrete(name="Trial Type") +
theme(legend.position=c(.8, .6)) +
facet_grid(. ~ Interval)
str(df.plotting)
probs
probs$sigma <- as.factor(probs$sigma)
probs$sigma
probs
str(probs)
probs$Sigma
probs$Sigma <- as.factor(probs$Sigma)
probs$Interval <- as.factor(probs$Interval)
names(props)
names(probs)
df.plotting <- melt(probs, id=c("Interval", "Sigma"))
dr.plotting
df.plotting
?value
?melt
df.plotting <- melt(probs, id=c("Interval", "Sigma"), value.name="ProportionCorrect")
df.plotting
ggplot(df.plotting, aes(x=Sigma, y=ProportionCorrect, color=variable, size=1.5)) +
geom_point(aes(size = 1.3)) +
guides(size=FALSE) +
geom_hline(yintercept=0.25, linetype="dashed")  +
xlab("Sigma Value (Amount of Attention Given to Initial Hypothesis)") +
scale_y_continuous(limits = c(0,1),breaks=c(0,.25,.5,.75,1),
name = "Predicted Proportion Correct") +
theme_bw(base_size=16) +
geom_line(aes(group=variable,y=ProportionCorrect),lty=1,size=1.3) +
theme(axis.title.y=element_text(vjust=0.1)) +
theme(axis.title.x=element_text(vjust=-0.5)) +
scale_color_discrete(name="Trial Type") +
theme(legend.position=c(.8, .6)) +
facet_grid(. ~ Interval)
geom_point(aes(size = 1.3)) +
guides(size=FALSE) +
geom_hline(yintercept=0.25, linetype="dashed")  +
xlab("Sigma Value (Amount of Attention Given to Initial Hypothesis)") +
scale_y_continuous(limits = c(0,1),breaks=c(0,.25,.5,.75,1),
name = "Predicted Proportion Correct") +
theme_bw(base_size=16) +
geom_line(aes(group=variable,y=ProportionCorrect),lty=1,size=1.3) +
theme(axis.title.y=element_text(vjust=0.1)) +
theme(axis.title.x=element_text(vjust=-0.5)) +
scale_color_discrete(name="Trial Type") +
theme(legend.position=c(.8, .6)) +
facet_grid(Interval ~ .)
ggplot(df.plotting, aes(x=Sigma, y=ProportionCorrect, color=variable, size=1.5)) +
geom_point(aes(size = 1.3)) +
guides(size=FALSE) +
geom_hline(yintercept=0.25, linetype="dashed")  +
xlab("Sigma Value (Amount of Attention Given to Initial Hypothesis)") +
scale_y_continuous(limits = c(0,1),breaks=c(0,.25,.5,.75,1),
name = "Predicted Proportion Correct") +
theme_bw(base_size=16) +
geom_line(aes(group=variable,y=ProportionCorrect),lty=1,size=1.3) +
theme(axis.title.y=element_text(vjust=0.1)) +
theme(axis.title.x=element_text(vjust=-0.5)) +
scale_color_discrete(name="Trial Type") +
theme(legend.position=c(.8, .6)) +
facet_grid(. ~ Interval) +
facet_wrap(~ Interval, ncol = 2)
ggplot(df.plotting, aes(x=Sigma, y=ProportionCorrect, color=variable, size=1.5)) +
geom_point(aes(size = 1.3)) +
guides(size=FALSE) +
geom_hline(yintercept=0.25, linetype="dashed")  +
xlab("Sigma Value (Amount of Attention Given to Initial Hypothesis)") +
scale_y_continuous(limits = c(0,1),breaks=c(0,.25,.5,.75,1),
name = "Predicted Proportion Correct") +
theme_bw(base_size=16) +
geom_line(aes(group=variable,y=ProportionCorrect),lty=1,size=1.3) +
theme(axis.title.y=element_text(vjust=0.1)) +
theme(axis.title.x=element_text(vjust=-0.5)) +
scale_color_discrete(name="Trial Type") +
theme(legend.position=c(.8, .6)) +
facet_grid(. ~ Interval) +
facet_wrap(~ Interval, ncol = 3)
ggplot(df.plotting, aes(x=Sigma, y=ProportionCorrect, color=variable, size=1.5)) +
geom_point(aes(size = 1.3)) +
guides(size=FALSE) +
geom_hline(yintercept=0.25, linetype="dashed")  +
xlab("Sigma Value (Amount of Attention Given to Initial Hypothesis)") +
scale_y_continuous(limits = c(0,1),breaks=c(0,.25,.5,.75,1),
name = "Predicted Proportion Correct") +
theme_bw(base_size=16) +
geom_line(aes(group=variable,y=ProportionCorrect),lty=1,size=1.3) +
theme(axis.title.y=element_text(vjust=0.1)) +
theme(axis.title.x=element_text(vjust=-0.5)) +
scale_color_discrete(name="Trial Type") +
theme(legend.position=c(.85, .7)) +
facet_grid(. ~ Interval) +
facet_wrap(~ Interval, ncol = 3)
ggplot(df.plotting, aes(x=Sigma, y=ProportionCorrect, color=variable, size=1.5)) +
geom_point(aes(size = 1.3)) +
guides(size=FALSE) +
geom_hline(yintercept=0.25, linetype="dashed")  +
xlab("Sigma Value (Amount of Attention Given to Initial Hypothesis)") +
scale_y_continuous(limits = c(0,1),breaks=c(0,.25,.5,.75,1),
name = "Predicted Proportion Correct") +
theme_bw(base_size=16) +
geom_line(aes(group=variable,y=ProportionCorrect),lty=1,size=1.3) +
theme(axis.title.y=element_text(vjust=0.1)) +
theme(axis.title.x=element_text(vjust=-0.5)) +
scale_color_discrete(name="Trial Type") +
theme(legend.position=c(.85, .4)) +
facet_grid(. ~ Interval) +
facet_wrap(~ Interval, ncol = 3)
ggplot(df.plotting, aes(x=Sigma, y=ProportionCorrect, color=variable, size=1.5)) +
geom_point(aes(size = 1.3)) +
guides(size=FALSE) +
geom_hline(yintercept=0.25, linetype="dashed")  +
xlab("Sigma Value (Amount of Attention Given to Initial Hypothesis)") +
scale_y_continuous(limits = c(0,1),breaks=c(0,.25,.5,.75,1),
name = "Predicted Proportion Correct") +
theme_bw(base_size=16) +
geom_line(aes(group=variable,y=ProportionCorrect),lty=1,size=1.3) +
theme(axis.title.y=element_text(vjust=0.1)) +
theme(axis.title.x=element_text(vjust=-0.5)) +
scale_color_discrete(name="Trial Type") +
theme(legend.position=c(.85, .4)) +
facet_grid(. ~ Interval) +
facet_wrap(~ Interval, ncol = 3) +
ggtitle("Delay Condition")
?with
source('~/.active-rstudio-document')
