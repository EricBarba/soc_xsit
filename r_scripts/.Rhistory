include.rownames=FALSE,hline.after=c(0,nrow(e2.tab)),
sanitize.text.function=function(x){x})
e3.tab <- as.data.frame(summary(m2.rt.test)$coef)
View(`e3.tab`)
summary(m2.rt.test)
e3.tab <- as.data.frame(summary(m2.rt.test)$coef)
e3.tab$Predictor <- c("Intercept","Switch Trial","Social Condition",
"Log(Interval)","Log(Referents)",
"Switch Trial*Social Condition",
"Switch Trial*Log(Interval)",
"Switch Trial*Log(Referent)",
"Social Condition*Log(Interval)",
"Social Condition*Log(Referent)",
"Log(Interval)*Log(Referent")
rownames(e3.tab) <- NULL
e3.tab <- e3.tab[,c(5,1:4)]
e3.tab$stars <- sapply(e3.tab[,5],getstars)
names(e3.tab)[6] <- ""
names(e3.tab)[4:5] <- c("$z$ value","$p$ value")
print(xtable(e3.tab,
align = c("l","l","r","r","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
e3.tab$Predictor <- c("Intercept","Switch Trial","Social Condition",
"Log(Interval)","Log(Referents)",
"Switch Trial*Social Condition",
"Switch Trial*Log(Interval)",
"Switch Trial*Log(Referent)",
"Social Condition*Log(Interval)",
"Social Condition*Log(Referent)",
"Log(Interval)*Log(Referent")
rownames(e3.tab) <- NULL
e3.tab <- e3.tab[,c(5,1:4)]
View(`e3.tab`)
e3.tab <- e3.tab[,c(5,1:3)]
e3.tab <- e3.tab[,c(4,1:4)]
e3.tab$stars <- sapply(e3.tab[,4],getstars)
names(e3.tab)[6] <- ""
View(`e3.tab`)
names(e3.tab)[5] <- ""
View(`e3.tab`)
names(e3.tab)[4:5] <- c("$z$ value","$p$ value")
View(`e3.tab`)
e3.tab$stars <- sapply(e3.tab[,4],getstars)
View(`e3.tab`)
e3.tab <- as.data.frame(summary(m2.rt.test)$coef)
e3.tab$Predictor <- c("Intercept","Switch Trial","Social Condition",
"Log(Interval)","Log(Referents)",
"Switch Trial*Social Condition",
"Switch Trial*Log(Interval)",
"Switch Trial*Log(Referent)",
"Social Condition*Log(Interval)",
"Social Condition*Log(Referent)",
"Log(Interval)*Log(Referent")
View(`e3.tab`)
rownames(e3.tab) <- NULL
e3.tab <- e3.tab[,c(4,1:4)]
View(`e3.tab`)
e3.tab <- e3.tab[,c(4,1:4)]
View(`e3.tab`)
e3.tab <- as.data.frame(summary(m2.rt.test)$coef)
e3.tab$Predictor <- c("Intercept","Switch Trial","Social Condition",
"Log(Interval)","Log(Referents)",
"Switch Trial*Social Condition",
"Switch Trial*Log(Interval)",
"Switch Trial*Log(Referent)",
"Social Condition*Log(Interval)",
"Social Condition*Log(Referent)",
"Log(Interval)*Log(Referent")
rownames(e3.tab) <- NULL
e3.tab <- e3.tab[,c(3,1:4)]
View(`e3.tab`)
e3.tab <- as.data.frame(summary(m2.rt.test)$coef)
e3.tab$Predictor <- c("Intercept","Switch Trial","Social Condition",
"Log(Interval)","Log(Referents)",
"Switch Trial*Social Condition",
"Switch Trial*Log(Interval)",
"Switch Trial*Log(Referent)",
"Social Condition*Log(Interval)",
"Social Condition*Log(Referent)",
"Log(Interval)*Log(Referent")
rownames(e3.tab) <- NULL
e3.tab[,c(5,1:4)]
e3.tab[,c(4,1:4)]
View(`e3.tab`)
e3.tab <- e3.tab[,c(4,1:4)]
View(`e3.tab`)
e3.tab$stars <- sapply(e3.tab[,5],getstars)
View(`e3.tab`)
e3.tab <- e3.tab[,c(4,1:4)]
e3.tab <- as.data.frame(summary(m2.rt.test)$coef)
e3.tab$Predictor <- c("Intercept","Switch Trial","Social Condition",
"Log(Interval)","Log(Referents)",
"Switch Trial*Social Condition",
"Switch Trial*Log(Interval)",
"Switch Trial*Log(Referent)",
"Social Condition*Log(Interval)",
"Social Condition*Log(Referent)",
"Log(Interval)*Log(Referent")
rownames(e3.tab) <- NULL
e3.tab <- e3.tab[,c(4,1:4)]
View(`e3.tab`)
e3.tab$Predictor.1 <- NULL
View(`e3.tab`)
e3.tab$stars <- sapply(e3.tab[,4],getstars)
View(`e3.tab`)
summary(m2.rt.test)
names(e3.tab)[4] <- c("$t$ value")
View(`e3.tab`)
print(xtable(e3.tab,
align = c("l","l","r","r","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
print(xtable(e3.tab,
align = c("l","r","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
print(xtable(e3.tab,
align = c("l","r","r,"r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
int(xtable(e3.tab,
align = c("l","l","r","r","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
print(xtable(e3.tab,
align = c("l","l","r","r","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
View(`e3.tab`)
print(xtable(e3.tab,
align = c("l","l","r","r","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
print(xtable(e3.tab,
align = c("l","l","r","r","r","r"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
e3.tab <- as.data.frame(summary(m2.rt.test)$coef)
e3.tab$Predictor <- c("Intercept","Switch Trial","Social Condition",
"Log(Interval)","Log(Referents)",
"Switch Trial*Social Condition",
"Switch Trial*Log(Interval)",
"Switch Trial*Log(Referent)",
"Social Condition*Log(Interval)",
"Social Condition*Log(Referent)",
"Log(Interval)*Log(Referent")
rownames(e3.tab) <- NULL
e3.tab <- e3.tab[,c(4,1:4)]
e3.tab$Predictor.1 <- NULL
e3.tab$stars <- sapply(e3.tab[,4],getstars)
names(e3.tab)[4] <- c("$t$ value)
e3.tab <- as.data.frame(summary(m2.rt.test)$coef)
e3.tab$Predictor <- c("Intercept","Switch Trial","Social Condition",
"Log(Interval)","Log(Referents)",
"Switch Trial*Social Condition",
"Switch Trial*Log(Interval)",
"Switch Trial*Log(Referent)",
"Social Condition*Log(Interval)",
"Social Condition*Log(Referent)",
"Log(Interval)*Log(Referent")
rownames(e3.tab) <- NULL
e3.tab <- e3.tab[,c(4,1:4)]
e3.tab$Predictor.1 <- NULL
e3.tab$stars <- sapply(e3.tab[,4],getstars)
names(e3.tab)[4] <- c("$t$ value")
print(xtable(e3.tab,
align = c("l","l","r","r","r","r"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
e3.tab <- as.data.frame(summary(m2.rt.test)$coef)
e3.tab$Predictor <- c("Intercept","Switch Trial","Social Condition",
"Log(Interval)","Log(Referents)",
"Switch Trial*Social Condition",
"Switch Trial*Log(Interval)",
"Switch Trial*Log(Referent)",
"Social Condition*Log(Interval)",
"Social Condition*Log(Referent)",
"Log(Interval)*Log(Referent")
rownames(e3.tab) <- NULL
e3.tab <- e3.tab[,c(4,1:4)]
e3.tab$Predictor.1 <- NULL
e3.tab$stars <- sapply(e3.tab[,4],getstars)
names(e3.tab)[4] <- c("$t$ value")
print(xtable(e3.tab,
align = c("l","l","r","r","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
print(xtable(e3.tab,
align = c("l","l","r","r","r","r"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
print(xtable(e3.tab,
align = c("l","l","r","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
e3.tab <- as.data.frame(summary(m2.rt.test)$coef)
e3.tab$Predictor <- c("Intercept","Switch Trial","Social Condition",
"Log(Interval)","Log(Referents)",
"Switch Trial*Social Condition",
"Switch Trial*Log(Interval)",
"Switch Trial*Log(Referent)",
"Social Condition*Log(Interval)",
"Social Condition*Log(Referent)",
"Log(Interval)*Log(Referent")
rownames(e3.tab) <- NULL
e3.tab <- e3.tab[,c(4,1:4)]
e3.tab$Predictor.1 <- NULL
e3.tab$stars <- sapply(e3.tab[,5],getstars)
names(e3.tab)[4] <- c("$t$ value")
print(xtable(e3.tab,
align = c("l","l","r","r","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
print(xtable(e3.tab,
align = c("l","r","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
print(xtable(e3.tab,
align = c("l","l","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
?ddply
library(dplyr)
?ddply()
library(plyr)
?ddply()
?mutate()
getwd()
setwd("/Users/kmacdonald/Documents/")
getwd()
setwd("/Users/kmacdonald/Documents/Projects/SOC_XSIT/r_scripts")
rm(list=ls())
library(plotrix)
library(lattice)
library(rjson)
library(ggplot2)
library(plyr)
library(chron)
library(car)
library(stringr)
all_results <- list.files(path = "/Users/kmacdonald/Documents/Projects/SOC_XSIT/soc_xsit_expts/soc_xsit_4_looks/",
pattern = '*.results', all.files = FALSE)
all.data <- data.frame()
for(f in 1:length(all_results)) {
data <- read.table(paste("/Users/kmacdonald/Documents/Projects/SOC_XSIT/soc_xsit_expts/soc_xsit_4_looks/",
all_results[f],sep=""),sep="\t",header=TRUE,
stringsAsFactors=FALSE)
long.data <- as.data.frame(matrix(ncol = 0, nrow = 20*nrow(data)))
c <- 1
# loops over each participant
for (i in 1:nrow(data)) {
# create list of trial information to allow for iteration
d <- fromJSON(as.character(data$Answer.data[i]))
# grab fields from JSON
for (j in 1:length(d)) {
long.data$subid[c] <- data$workerid[i]
long.data$submit.date[c] <-  paste(word(data$assignmentsubmittime[i],
start=2,end=3),
word(data$assignmentsubmittime[i]
,start=-1L))
long.data$submit.time[c] <-  word(data$assignmentsubmittime[i]
,start=4)
long.data$trial.num[c] <- j
long.data$gazeLength[c] <- fromJSON(as.character(data$Answer.condition[i]))
long.data$condition[c] <- fromJSON(as.character(data$Answer.social_cond[i]))
long.data$interval[c] <- fromJSON(as.character(data$Answer.delay_condition[i]))
long.data$numPic[c] <- fromJSON(as.character(data$Answer.numReferents[i]))
long.data$browser[c] <- fromJSON(as.character(data$Answer.browser[i]))
long.data$itemNum[c] <- d[[j]]$itemNum
long.data$trialType[c] <- d[[j]]$trialType
long.data$samePos[c] <- d[[j]]$samePos
long.data$chosen[c] <- d[[j]]$chosen
long.data$chosenIdx[c] <- d[[j]]$chosen_idx
long.data$kept[c] <- d[[j]]$kept
long.data$keptIdx[c] <- d[[j]]$kept_idx
long.data$rt[c] <- d[[j]]$rt
long.data$face[c] <- d[[j]]$face
long.data$faceIdx[c] <- d[[j]]$faceIdx
c <- c + 1
}
}
}
length(all_results)
3000/20
View(long.data)
View(data)
str(long.data)
as.factor(long.data$condition)
rm(list=ls())
all_results <- list.files(path = "/Users/kmacdonald/Documents/Projects/SOC_XSIT/soc_xsit_expts/soc_xsit_4_looks/",
pattern = '*.results', all.files = FALSE)
all_results
all.data <- data.frame()
all_results <- "soc_xsit_4_looks_pilot_2.results"
for(f in 1:length(all_results)) {
data <- read.table(paste("/Users/kmacdonald/Documents/Projects/SOC_XSIT/soc_xsit_expts/soc_xsit_4_looks/",
all_results[f],sep=""),sep="\t",header=TRUE,
stringsAsFactors=FALSE)
long.data <- as.data.frame(matrix(ncol = 0, nrow = 20*nrow(data)))
c <- 1
# loops over each participant
for (i in 1:nrow(data)) {
# create list of trial information to allow for iteration
d <- fromJSON(as.character(data$Answer.data[i]))
# grab fields from JSON
for (j in 1:length(d)) {
long.data$subid[c] <- data$workerid[i]
long.data$submit.date[c] <-  paste(word(data$assignmentsubmittime[i],
start=2,end=3),
word(data$assignmentsubmittime[i]
,start=-1L))
long.data$submit.time[c] <-  word(data$assignmentsubmittime[i]
,start=4)
long.data$trial.num[c] <- j
long.data$gazeLength[c] <- fromJSON(as.character(data$Answer.condition[i]))
long.data$condition[c] <- fromJSON(as.character(data$Answer.social_cond[i]))
long.data$interval[c] <- fromJSON(as.character(data$Answer.delay_condition[i]))
long.data$numPic[c] <- fromJSON(as.character(data$Answer.numReferents[i]))
long.data$browser[c] <- fromJSON(as.character(data$Answer.browser[i]))
long.data$itemNum[c] <- d[[j]]$itemNum
long.data$trialType[c] <- d[[j]]$trialType
long.data$samePos[c] <- d[[j]]$samePos
long.data$chosen[c] <- d[[j]]$chosen
long.data$chosenIdx[c] <- d[[j]]$chosen_idx
long.data$kept[c] <- d[[j]]$kept
long.data$keptIdx[c] <- d[[j]]$kept_idx
long.data$rt[c] <- d[[j]]$rt
long.data$face[c] <- d[[j]]$face
long.data$faceIdx[c] <- d[[j]]$faceIdx
c <- c + 1
}
}
}
## Flag exposure, test, and example trials
long.data$exposureTrial <- 0
long.data$testTrial <- 0
long.data$exampleTrial <- 0
for (row in 1:nrow(long.data)) {
if (long.data$interval[row] == "Zero") {
if (long.data$trial.num[row]==5 |
long.data$trial.num[row]==7 |
long.data$trial.num[row]==9 |
long.data$trial.num[row]==11 |
long.data$trial.num[row]==13 |
long.data$trial.num[row]==15 |
long.data$trial.num[row]==17 |
long.data$trial.num[row]==19) {
long.data$exposureTrial[row] <- 1
} else if (long.data$trial.num[row]==6 |
long.data$trial.num[row]==8 |
long.data$trial.num[row]==10 |
long.data$trial.num[row]==12 |
long.data$trial.num[row]==14 |
long.data$trial.num[row]==16 |
long.data$trial.num[row]==18 |
long.data$trial.num[row]==20) {
long.data$testTrial[row] <- 1
} else {
long.data$exampleTrial[row] <- 1
}
} else if (long.data$interval[row] == "One") {
if (long.data$trial.num[row]==5 |
long.data$trial.num[row]==6 |
long.data$trial.num[row]==9 |
long.data$trial.num[row]==10 |
long.data$trial.num[row]==13 |
long.data$trial.num[row]==14 |
long.data$trial.num[row]==17 |
long.data$trial.num[row]==18) {
long.data$exposureTrial[row] <- 1
} else if (long.data$trial.num[row]==7 |
long.data$trial.num[row]==8 |
long.data$trial.num[row]==11 |
long.data$trial.num[row]==12 |
long.data$trial.num[row]==15 |
long.data$trial.num[row]==16 |
long.data$trial.num[row]==19 |
long.data$trial.num[row]==20) {
long.data$testTrial[row] <- 1
} else {
long.data$exampleTrial[row] <- 1
}
} else if (long.data$interval[row] == "Three") {
if (long.data$trial.num[row]==5 |
long.data$trial.num[row]==6 |
long.data$trial.num[row]==7 |
long.data$trial.num[row]==8 |
long.data$trial.num[row]==13 |
long.data$trial.num[row]==14 |
long.data$trial.num[row]==15 |
long.data$trial.num[row]==16) {
long.data$exposureTrial[row] <- 1
} else if (long.data$trial.num[row]==9 |
long.data$trial.num[row]==10 |
long.data$trial.num[row]==11 |
long.data$trial.num[row]==12 |
long.data$trial.num[row]==17 |
long.data$trial.num[row]==18 |
long.data$trial.num[row]==19 |
long.data$trial.num[row]==20) {
long.data$testTrial[row] <- 1
} else {
long.data$exampleTrial[row] <- 1
}
} else if (long.data$interval[row] == "Seven") {
if (long.data$trial.num[row]==5 |
long.data$trial.num[row]==6 |
long.data$trial.num[row]==7 |
long.data$trial.num[row]==8 |
long.data$trial.num[row]==9 |
long.data$trial.num[row]==10 |
long.data$trial.num[row]==11 |
long.data$trial.num[row]==12) {
long.data$exposureTrial[row] <- 1
} else if (long.data$trial.num[row]==13 |
long.data$trial.num[row]==14 |
long.data$trial.num[row]==15 |
long.data$trial.num[row]==16 |
long.data$trial.num[row]==17 |
long.data$trial.num[row]==18 |
long.data$trial.num[row]==19 |
long.data$trial.num[row]==20) {
long.data$testTrial[row] <- 1
} else {
long.data$exampleTrial[row] <- 1
}
}
}
all.data <- long.data
View(all.data)
## computes day/time of each hit for excluding multiples
all.data$day.and.time <- chron(dates = all.data$submit.date,
times = all.data$submit.time,
format=c("mon d y","h:m:s"))
all.data <- all.data[with(all.data,order(subid,day.and.time)),]
drop.subs <- ddply(all.data,.(subid),
function(x) {nrow(x) > 20})
drop.subs <- drop.subs[drop.subs$V1,1] # grabs subs who participated more than once
# grabs earliest HIT for each participant
all.drops <- matrix(0,nrow(all.data))
for(sub in drop.subs) {
rows <- as.integer(all.data$subid == sub)
all.drops[rows & (cumsum(rows) > 20)] <- 1
}
all.data <- subset(all.data,!all.drops) ## subsets data without subs who participated twice
# recodes subid as factor and recode trial type as factor with two levels: Same and Switch
all.data$subid <- as.factor(all.data$subid)
all.data$trialType <- factor(all.data$trialType, labels = c('Same','Switch'))
# recode interval as numeric for plotting
all.data$intervalNum <- recode(all.data$interval, "'Zero'=0; 'One'=1; 'Three'=3; 'Seven'=7", as.factor.result=FALSE)
# renumbers trials to be consistent across conditions
trial.nums <- function(x) {
xmod <- x
nums <- x$trial.num
for (i in 1:length(nums)) {
xmod$trial.num[xmod$trial.num==nums[i]] <- i
}
return(xmod)
}
## excludes subjects for getting example trials wrong
# grabs example data
example.data <- all.data[all.data$trial.num == 1:4, ]
include.subs <- ddply(example.data,.(subid),
function(x) {x$chosen[1] == "squirrel" &
x$chosen[2] == "squirrel" &
x$chosen[3] == "tomato" &
x$chosen[4] == "tomato"})
names(include.subs) <- c("subid","include")
# merges include column to data frame
all.data <- merge(all.data,include.subs,sort = FALSE)
# keeps just the subs who responded accurately on example trials
keep.data <- subset(all.data,include)
## flag first test trials for subjects ##
keep.data$first.trial <- FALSE
keep.data$first.trial[(keep.data$interval=="Zero" & keep.data$trial.num==6) |
(keep.data$interval=="One" & keep.data$trial.num==7) |
(keep.data$interval=="Three" & keep.data$trial.num==9) |
(keep.data$interval=="Seven" & keep.data$trial.num==13)] <- TRUE
# creates numeric vars for data analysis
keep.data$numPicN <- as.numeric(keep.data$numPic)
# flags correct/incorrect on same/switch trials
keep.data$correct <- keep.data$chosen == keep.data$kept
write.csv(keep.data, "/Users/kmacdonald/Documents/Projects/SOC_XSIT/processed_data/soc_xsit_4_looks_pilot_2.csv")
d1 <- read.csv("/Users/kmacdonald/soc_xsit/processed_data/soc_xsit_4_looks_pilot_2.csv")
library(bootstrap)
library(lme4)
library(ggplot2)
library(arm)
library(directlabels)
library(stringr)
library(plyr)
library(reshape2)
library(car)
library(dplyr)
library(xtable)
source('/Users/kmacdonald/soc_xsit/XSIT-MIN/analysis/Ranalysis/useful.R')
