facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
gamma <- 1.5                    # strength of initial encoding
lambda <- 0.1597503             # rate of memory decay
sigma <- 1                      # amount of belief given to initial hypothesis
int <- c(0,1,3,7)               # number of intervening words
numPic <- 4                     # number of pics
## generate probabilites for different parameter values (sigma, number of pics, delay)
probs <- data.frame()
for (i in 1:length(int)){
for (n in 1:length(numPic)) {
for (s in 1:length(sigma)) {
for (g in 1:length(gamma)) {
probs <- rbind(probs,data.frame(p = compute.probs2(gamma[g], lambda, sigma[s], numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma[g],
lambda = lambda,
numPic = numPic[n],
cond ="no-social"))
probs <- rbind(probs,data.frame(p = compute.probs2(gamma[g], lambda, sigma[s], numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma[g],
lambda = lambda,
numPic = numPic[n],
cond = "social"))
}
}
}
}
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
data=subset(probs, gamma==1.5)) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
gamma <- 1.5                    # strength of initial encoding
lambda <- 0.1597503             # rate of memory decay
sigma <- 0.57                      # amount of belief given to initial hypothesis
int <- c(0,1,3,7)               # number of intervening words
numPic <- 4                     # number of pics
## generate probabilites for different parameter values (sigma, number of pics, delay)
probs <- data.frame()
for (i in 1:length(int)){
for (n in 1:length(numPic)) {
for (s in 1:length(sigma)) {
for (g in 1:length(gamma)) {
probs <- rbind(probs,data.frame(p = compute.probs2(gamma[g], lambda, sigma[s], numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma[g],
lambda = lambda,
numPic = numPic[n],
cond ="no-social"))
probs <- rbind(probs,data.frame(p = compute.probs2(gamma[g], lambda, sigma[s], numPic[n], int[i]),
trial.type = c("same","switch"),
int = int[i],
sigma = sigma[s],
gamma = gamma[g],
lambda = lambda,
numPic = numPic[n],
cond = "social"))
}
}
}
}
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
data=subset(probs, gamma==1.5)) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
options(device="quartz")
qplot(x=int,y=p, linetype=trial.type,
colour=cond,
geom=c("line", "point"),
data=subset(probs, gamma==1.5)) +
facet_grid(sigma ~ numPic) +
ylim(0,1) +
xlab("Delay") +
ylab("Proportion Correct") +
theme_bw()
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
?bootstrap()
library(bootstrap)
?bootstrap()
?quantile()
quantile(x <- rnorm(1001))
x
x <- rnorm(1000)
?rnorm()
theta
?aggregate()
rm(list=ls())
library(bootstrap)
library(lme4)
library(ggplot2)
library(arm)
library(directlabels)
library(stringr)
library(plyr)
library(reshape2)
library(car)
library(dplyr)
library(xtable)
## code for bootstrapping 95% confidence intervals
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
## helper functions
inv.logit <- function(x) {1 / (1 + exp(-x))} # for checking coefficients in glm
## maps levels of variable to
mf_labeller <- function(var, value){
value <- as.character(value)
if (var=="numPicN") {
value[value=="2"] <- "2-Referents"
value[value=="4"] <- "4-Referents"
value[value=="6"] <- "6-Referents"
value[value=="8"] <- "8-Referents"
}
return(value)
}
d <- read.csv("/Users/kmacdonald/Documents/Projects/SOC_XSIT/processed_data/soc_xsit_expt1_master.csv")
## get number of subjects in each condition
numSubs <- aggregate(correct ~ subid + condition + intervalNum + numPicN, data=d, FUN=mean)
numSubs.summary <- count(numSubs, vars=c("condition", "intervalNum", "numPicN"))
## check for duplicates
unique(numSubs$subid[duplicated(numSubs$subid)])
## -------------- GET SUBSETS FOR ANALYSIS --------------
## get the test trials only
d.test <- subset(d, testTrial==1)
## get first trials only
d.first.trial <- subset(d, testTrial==1 & first.trial==TRUE)
## grab exposure trials only
d.exp <- subset(d, exposureTrial==1)
d.exp$faceIdx6 <- revalue(d.exp$face, c("eyes_left_90"=0, "eyes_right_90"=1,
"eyes_left"=2, "eyes_down_left"=3,
"eyes_down_right"=4, "eyes_right"=5,
"eyescenter"=-1))
# flag if subject chose target of eye gaze
# exposure trials left/right midline and on the bottom row
d.exp$choseSocial <- NA
d.exp$imgLocation <- NA
d.exp$imgLocation <- ifelse((d.exp$face == "eyes_right_90") |
(d.exp$face == "eyes_left_90") |
(d.exp$face == "eyes_center" & d.exp$chosenIdx <= 1),
"midline",
ifelse((d.exp$face == "eyes_up_left") |
(d.exp$face == "eyes_up_mid_left") |
(d.exp$face == "eyes_up_mid_right") |
(d.exp$face == "eyes_up_right") |
(d.exp$face == "eyes_center" & d.exp$chosenIdx <= 3),
"top",
"bottom"))
d.exp$choseSocial <- ifelse((d.exp$numPic == 6) & (d.exp$condition =="Social"),
d.exp$faceIdx6 == d.exp$chosenIdx,
d.exp$faceIdx == d.exp$chosenIdx)
## aggregate
mss <- aggregate(correct ~ trialType + condition + subid + intervalNum + numPicN, data=d.test, FUN=mean)
ms <- aggregate(correct ~ trialType + condition + intervalNum + numPicN, data=mss, FUN=mean)
ms$corr.cih <- aggregate(correct ~ trialType + condition + intervalNum + numPicN, data=mss, FUN=ci.high)$correct
ms$corr.cil <- aggregate(correct ~ trialType + condition + intervalNum + numPicN, data=mss, FUN=ci.low)$correct
# add reaction times
mss.rt <- aggregate(rt ~ trialType + condition + subid + intervalNum + numPicN, data=d.test, FUN=mean)
ms$rt <- aggregate(rt ~ trialType + condition + intervalNum + numPicN, data=mss.rt, FUN=mean)$rt
ms$rt.cih <- aggregate(rt ~ trialType + condition + intervalNum + numPicN, data=mss.rt, FUN=ci.high)$rt
ms$rt.cil <- aggregate(rt ~ trialType + condition + intervalNum + numPicN, data=mss.rt, FUN=ci.low)$rt
qplot(x=intervalNum,y=rt, linetype=trialType,
ymin=rt-rt.cil, ymax=rt+rt.cih,
colour=condition,
geom=c("line", "pointrange"),
position=position_dodge(width=.02),
data=ms) +
theme_bw() +
facet_grid(. ~ numPicN, labeller=mf_labeller) +
ylab("Reaction Time (ms)") +
scale_x_continuous(limits=c(-.05,7.1), breaks=c(0, 1, 3, 7),
name = "Intervening Trials") +
scale_color_manual(values=c("firebrick1", "dodgerblue"),
name="Experimental\nCondition") +
scale_linetype_manual("Trial Type",
values=c("Switch"=2,"Same"=1)) +
guides(color = guide_legend(keywidth = 2, keyheight = 1,
reverse=T)) +
guides(linetype = guide_legend(keywidth = 2, keyheight = 1)) +
theme(legend.position = "top")
View(mss.rt)
m1.rt.test <- lmer(rt ~ (trialType + condition +
log2(intervalNum + 1) + log2(numPicN))^3 +
(trialType | subid),
data=mss.exp.rt)
m1.rt.test <- lmer(rt ~ (trialType + condition +
log2(intervalNum + 1) + log2(numPicN))^3 +
(trialType | subid),
data=mss.rt)
names(mss.rt)
View(mss.rt)
m1.rt.test <- lmer(rt ~ (trialType + condition +
log2(intervalNum + 1) + log2(numPicN))^3 +
(trialType | subid),
data=d.test)
?lmer()
m1.rt.test <- lmer(rt ~ (trialType + condition +
log2(intervalNum + 1) + log2(numPicN))^3 +
(trialType | subid),
data=d.test, NAGQ=0)
m2.rt.test <- lmer(rt ~ (trialType + condition +
log2(intervalNum + 1) + log2(numPicN))^2 +
(trialType | subid),
data=d.test)
summary(m2.rt.test)
lm(rt ~ condition * log2(intervalNum + 1) * log2(numPicN),
data=mss.exp.rt)
mss.exp.rt <- aggregate(rt ~  + condition + subid + intervalNum + numPicN, data=d.exp, FUN=mean)
# remove +/- 2SD
mss.exp.rt$rt[log(mss.exp.rt$rt) > mean(log(mss.exp.rt$rt)) + 2* sd(log(mss.exp.rt$rt)) |
log(mss.exp.rt$rt) < mean(log(mss.exp.rt$rt)) - 2* sd(log(mss.exp.rt$rt))] <- NA
ms.exp.rt <- aggregate(rt ~  + condition + intervalNum + numPicN, data=mss.exp.rt, FUN=mean)
ms.exp.rt$rt.cih <- aggregate(rt ~  + condition + intervalNum + numPicN, data=mss.exp.rt, FUN=ci.high)$rt
ms.exp.rt$rt.cil <- aggregate(rt ~  + condition + intervalNum + numPicN, data=mss.exp.rt, FUN=ci.low)$rt
lm(rt ~ condition * log2(intervalNum + 1) * log2(numPicN),
data=mss.exp.rt)
m1.rt <- lm(rt ~ condition * log2(intervalNum + 1) * log2(numPicN),
data=mss.exp.rt)
summary(m1.rt)
e2.tab <- as.data.frame(summary(m1.rt)$coef)
View(`e2.tab`)
e2.tab <- as.data.frame(summary(m1.rt)$coef)
e2.tab$Predictor <- c("Intercept","Social Condition","Log(Interval)",
"Log(Referents)",
"Social Condition*Log(Interval)",
"Social Condition*Log(Referent)",
"Log(Interval)*Log(Referent",
"Social Condition*Log(Interval)*Log(Referents)")
rownames(e2.tab) <- NULL
e2.tab <- e2.tab[,c(5,1:4)]
e2.tab$stars <- sapply(e2.tab[,5],getstars)
source('/Users/kmacdonald/Documents/Projects/SOC_XSIT/XSIT-MIN/analysis/Ranalysis/useful.R')
e2.tab$stars <- sapply(e2.tab[,5],getstars)
names(e2.tab)[6] <- ""
View(`e2.tab`)
names(e2.tab)[4:5] <- c("$t$ value","$p$ value")
print(xtable(e2.tab,
align = c("l","l","r","r","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e1.tab)),
sanitize.text.function=function(x){x})
print(xtable(e2.tab,
align = c("l","l","r","r","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e2.tab)),
sanitize.text.function=function(x){x})
e3.tab <- as.data.frame(summary(m2.rt.test)$coef)
View(`e3.tab`)
summary(m2.rt.test)
e3.tab <- as.data.frame(summary(m2.rt.test)$coef)
e3.tab$Predictor <- c("Intercept","Switch Trial","Social Condition",
"Log(Interval)","Log(Referents)",
"Switch Trial*Social Condition",
"Switch Trial*Log(Interval)",
"Switch Trial*Log(Referent)",
"Social Condition*Log(Interval)",
"Social Condition*Log(Referent)",
"Log(Interval)*Log(Referent")
rownames(e3.tab) <- NULL
e3.tab <- e3.tab[,c(5,1:4)]
e3.tab$stars <- sapply(e3.tab[,5],getstars)
names(e3.tab)[6] <- ""
names(e3.tab)[4:5] <- c("$z$ value","$p$ value")
print(xtable(e3.tab,
align = c("l","l","r","r","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
e3.tab$Predictor <- c("Intercept","Switch Trial","Social Condition",
"Log(Interval)","Log(Referents)",
"Switch Trial*Social Condition",
"Switch Trial*Log(Interval)",
"Switch Trial*Log(Referent)",
"Social Condition*Log(Interval)",
"Social Condition*Log(Referent)",
"Log(Interval)*Log(Referent")
rownames(e3.tab) <- NULL
e3.tab <- e3.tab[,c(5,1:4)]
View(`e3.tab`)
e3.tab <- e3.tab[,c(5,1:3)]
e3.tab <- e3.tab[,c(4,1:4)]
e3.tab$stars <- sapply(e3.tab[,4],getstars)
names(e3.tab)[6] <- ""
View(`e3.tab`)
names(e3.tab)[5] <- ""
View(`e3.tab`)
names(e3.tab)[4:5] <- c("$z$ value","$p$ value")
View(`e3.tab`)
e3.tab$stars <- sapply(e3.tab[,4],getstars)
View(`e3.tab`)
e3.tab <- as.data.frame(summary(m2.rt.test)$coef)
e3.tab$Predictor <- c("Intercept","Switch Trial","Social Condition",
"Log(Interval)","Log(Referents)",
"Switch Trial*Social Condition",
"Switch Trial*Log(Interval)",
"Switch Trial*Log(Referent)",
"Social Condition*Log(Interval)",
"Social Condition*Log(Referent)",
"Log(Interval)*Log(Referent")
View(`e3.tab`)
rownames(e3.tab) <- NULL
e3.tab <- e3.tab[,c(4,1:4)]
View(`e3.tab`)
e3.tab <- e3.tab[,c(4,1:4)]
View(`e3.tab`)
e3.tab <- as.data.frame(summary(m2.rt.test)$coef)
e3.tab$Predictor <- c("Intercept","Switch Trial","Social Condition",
"Log(Interval)","Log(Referents)",
"Switch Trial*Social Condition",
"Switch Trial*Log(Interval)",
"Switch Trial*Log(Referent)",
"Social Condition*Log(Interval)",
"Social Condition*Log(Referent)",
"Log(Interval)*Log(Referent")
rownames(e3.tab) <- NULL
e3.tab <- e3.tab[,c(3,1:4)]
View(`e3.tab`)
e3.tab <- as.data.frame(summary(m2.rt.test)$coef)
e3.tab$Predictor <- c("Intercept","Switch Trial","Social Condition",
"Log(Interval)","Log(Referents)",
"Switch Trial*Social Condition",
"Switch Trial*Log(Interval)",
"Switch Trial*Log(Referent)",
"Social Condition*Log(Interval)",
"Social Condition*Log(Referent)",
"Log(Interval)*Log(Referent")
rownames(e3.tab) <- NULL
e3.tab[,c(5,1:4)]
e3.tab[,c(4,1:4)]
View(`e3.tab`)
e3.tab <- e3.tab[,c(4,1:4)]
View(`e3.tab`)
e3.tab$stars <- sapply(e3.tab[,5],getstars)
View(`e3.tab`)
e3.tab <- e3.tab[,c(4,1:4)]
e3.tab <- as.data.frame(summary(m2.rt.test)$coef)
e3.tab$Predictor <- c("Intercept","Switch Trial","Social Condition",
"Log(Interval)","Log(Referents)",
"Switch Trial*Social Condition",
"Switch Trial*Log(Interval)",
"Switch Trial*Log(Referent)",
"Social Condition*Log(Interval)",
"Social Condition*Log(Referent)",
"Log(Interval)*Log(Referent")
rownames(e3.tab) <- NULL
e3.tab <- e3.tab[,c(4,1:4)]
View(`e3.tab`)
e3.tab$Predictor.1 <- NULL
View(`e3.tab`)
e3.tab$stars <- sapply(e3.tab[,4],getstars)
View(`e3.tab`)
summary(m2.rt.test)
names(e3.tab)[4] <- c("$t$ value")
View(`e3.tab`)
print(xtable(e3.tab,
align = c("l","l","r","r","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
print(xtable(e3.tab,
align = c("l","r","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
print(xtable(e3.tab,
align = c("l","r","r,"r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
int(xtable(e3.tab,
align = c("l","l","r","r","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
print(xtable(e3.tab,
align = c("l","l","r","r","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
View(`e3.tab`)
print(xtable(e3.tab,
align = c("l","l","r","r","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
print(xtable(e3.tab,
align = c("l","l","r","r","r","r"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
e3.tab <- as.data.frame(summary(m2.rt.test)$coef)
e3.tab$Predictor <- c("Intercept","Switch Trial","Social Condition",
"Log(Interval)","Log(Referents)",
"Switch Trial*Social Condition",
"Switch Trial*Log(Interval)",
"Switch Trial*Log(Referent)",
"Social Condition*Log(Interval)",
"Social Condition*Log(Referent)",
"Log(Interval)*Log(Referent")
rownames(e3.tab) <- NULL
e3.tab <- e3.tab[,c(4,1:4)]
e3.tab$Predictor.1 <- NULL
e3.tab$stars <- sapply(e3.tab[,4],getstars)
names(e3.tab)[4] <- c("$t$ value)
e3.tab <- as.data.frame(summary(m2.rt.test)$coef)
e3.tab$Predictor <- c("Intercept","Switch Trial","Social Condition",
"Log(Interval)","Log(Referents)",
"Switch Trial*Social Condition",
"Switch Trial*Log(Interval)",
"Switch Trial*Log(Referent)",
"Social Condition*Log(Interval)",
"Social Condition*Log(Referent)",
"Log(Interval)*Log(Referent")
rownames(e3.tab) <- NULL
e3.tab <- e3.tab[,c(4,1:4)]
e3.tab$Predictor.1 <- NULL
e3.tab$stars <- sapply(e3.tab[,4],getstars)
names(e3.tab)[4] <- c("$t$ value")
print(xtable(e3.tab,
align = c("l","l","r","r","r","r"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
e3.tab <- as.data.frame(summary(m2.rt.test)$coef)
e3.tab$Predictor <- c("Intercept","Switch Trial","Social Condition",
"Log(Interval)","Log(Referents)",
"Switch Trial*Social Condition",
"Switch Trial*Log(Interval)",
"Switch Trial*Log(Referent)",
"Social Condition*Log(Interval)",
"Social Condition*Log(Referent)",
"Log(Interval)*Log(Referent")
rownames(e3.tab) <- NULL
e3.tab <- e3.tab[,c(4,1:4)]
e3.tab$Predictor.1 <- NULL
e3.tab$stars <- sapply(e3.tab[,4],getstars)
names(e3.tab)[4] <- c("$t$ value")
print(xtable(e3.tab,
align = c("l","l","r","r","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
print(xtable(e3.tab,
align = c("l","l","r","r","r","r"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
print(xtable(e3.tab,
align = c("l","l","r","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
e3.tab <- as.data.frame(summary(m2.rt.test)$coef)
e3.tab$Predictor <- c("Intercept","Switch Trial","Social Condition",
"Log(Interval)","Log(Referents)",
"Switch Trial*Social Condition",
"Switch Trial*Log(Interval)",
"Switch Trial*Log(Referent)",
"Social Condition*Log(Interval)",
"Social Condition*Log(Referent)",
"Log(Interval)*Log(Referent")
rownames(e3.tab) <- NULL
e3.tab <- e3.tab[,c(4,1:4)]
e3.tab$Predictor.1 <- NULL
e3.tab$stars <- sapply(e3.tab[,5],getstars)
names(e3.tab)[4] <- c("$t$ value")
print(xtable(e3.tab,
align = c("l","l","r","r","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
print(xtable(e3.tab,
align = c("l","r","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
print(xtable(e3.tab,
align = c("l","l","r","r","l"),
label = "tab:exp1_reg"),
include.rownames=FALSE,hline.after=c(0,nrow(e3.tab)),
sanitize.text.function=function(x){x})
?ddply
library(dplyr)
?ddply()
library(plyr)
?ddply()
?mutate()
